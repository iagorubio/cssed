# Makefile.in generated by automake 1.10 from Makefile.am.
# scintilla/gtk/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




pkgdatadir = $(datadir)/cssed
pkglibdir = $(libdir)/cssed
pkgincludedir = $(includedir)/cssed
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-redhat-linux-gnu
host_triplet = x86_64-redhat-linux-gnu
subdir = scintilla/gtk
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
LIBRARIES = $(noinst_LIBRARIES)
AR = ar
ARFLAGS = cru
libscintilla_a_AR = $(AR) $(ARFLAGS)
libscintilla_a_DEPENDENCIES = scintilla-marshal.o
am__objects_1 = LexYAML.$(OBJEXT) LexVHDL.$(OBJEXT) \
	LexVerilog.$(OBJEXT) LexVB.$(OBJEXT) LexTeX.$(OBJEXT) \
	LexTADS3.$(OBJEXT) LexSQL.$(OBJEXT) LexSpecman.$(OBJEXT) \
	LexSmalltalk.$(OBJEXT) LexScriptol.$(OBJEXT) LexRuby.$(OBJEXT) \
	LexRebol.$(OBJEXT) LexPython.$(OBJEXT) LexPS.$(OBJEXT) \
	LexPOV.$(OBJEXT) LexPerl.$(OBJEXT) LexPB.$(OBJEXT) \
	LexPascal.$(OBJEXT) LexOthers.$(OBJEXT) LexNsis.$(OBJEXT) \
	LexMSSQL.$(OBJEXT) LexMPT.$(OBJEXT) LexMMIXAL.$(OBJEXT) \
	LexMetapost.$(OBJEXT) LexMatlab.$(OBJEXT) LexLua.$(OBJEXT) \
	LexLout.$(OBJEXT) LexLisp.$(OBJEXT) LexKix.$(OBJEXT) \
	LexHTML.$(OBJEXT) LexHaskell.$(OBJEXT) LexGui4Cli.$(OBJEXT) \
	LexFortran.$(OBJEXT) LexForth.$(OBJEXT) LexFlagship.$(OBJEXT) \
	LexEScript.$(OBJEXT) LexErlang.$(OBJEXT) LexEiffel.$(OBJEXT) \
	LexCSS.$(OBJEXT) LexCsound.$(OBJEXT) LexCrontab.$(OBJEXT) \
	LexCPP.$(OBJEXT) LexConf.$(OBJEXT) LexCLW.$(OBJEXT) \
	LexCaml.$(OBJEXT) LexBullant.$(OBJEXT) LexBasic.$(OBJEXT) \
	LexBash.$(OBJEXT) LexBaan.$(OBJEXT) LexAVE.$(OBJEXT) \
	LexAU3.$(OBJEXT) LexAsn1.$(OBJEXT) LexAsm.$(OBJEXT) \
	LexAPDL.$(OBJEXT) LexAda.$(OBJEXT) LexInno.$(OBJEXT) \
	LexOpal.$(OBJEXT) LexSpice.$(OBJEXT) LexTCL.$(OBJEXT) \
	LexCmake.$(OBJEXT) LexD.$(OBJEXT) LexGAP.$(OBJEXT) \
	LexPLM.$(OBJEXT) LexProgress.$(OBJEXT) LexAbaqus.$(OBJEXT) \
	LexASY.$(OBJEXT) LexR.$(OBJEXT)
am__objects_2 = AutoComplete.$(OBJEXT) CallTip.$(OBJEXT) \
	CellBuffer.$(OBJEXT) CharClassify.$(OBJEXT) \
	ContractionState.$(OBJEXT) Document.$(OBJEXT) \
	DocumentAccessor.$(OBJEXT) Editor.$(OBJEXT) \
	ExternalLexer.$(OBJEXT) Indicator.$(OBJEXT) KeyMap.$(OBJEXT) \
	KeyWords.$(OBJEXT) LineMarker.$(OBJEXT) \
	PositionCache.$(OBJEXT) PropSet.$(OBJEXT) RESearch.$(OBJEXT) \
	ScintillaBase.$(OBJEXT) Style.$(OBJEXT) StyleContext.$(OBJEXT) \
	UniConversion.$(OBJEXT) ViewStyle.$(OBJEXT) \
	WindowAccessor.$(OBJEXT) XPM.$(OBJEXT) Decoration.$(OBJEXT) \
	RunStyles.$(OBJEXT) PlatGTK.$(OBJEXT) ScintillaGTK.$(OBJEXT) \
	$(am__objects_1)
am_libscintilla_a_OBJECTS = $(am__objects_2)
libscintilla_a_OBJECTS = $(am_libscintilla_a_OBJECTS)
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(libscintilla_a_SOURCES)
DIST_SOURCES = $(libscintilla_a_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/iago/files/projects/sf/cssed/cssed/missing --run aclocal-1.10
AMTAR = ${SHELL} /home/iago/files/projects/sf/cssed/cssed/missing --run tar
AUTOCONF = ${SHELL} /home/iago/files/projects/sf/cssed/cssed/missing --run autoconf
AUTOHEADER = ${SHELL} /home/iago/files/projects/sf/cssed/cssed/missing --run autoheader
AUTOMAKE = ${SHELL} /home/iago/files/projects/sf/cssed/cssed/missing --run automake-1.10
AWK = gawk
CATALOGS =  es.gmo fr.gmo gl.gmo it.gmo de.gmo ca.gmo cs.gmo
CATOBJEXT = .gmo
CC = g++
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DATADIRNAME = share
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DESKTOP_FILE_INSTALL = /usr/bin/desktop-file-install
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /usr/bin/grep -E
EXEEXT = 
GETTEXT_PACKAGE = cssed
GLIB_GENMARSHAL = glib-genmarshal
GLIB_MKENUMS = glib-mkenums
GMOFILES =  es.gmo fr.gmo gl.gmo it.gmo de.gmo ca.gmo cs.gmo
GMSGFMT = /usr/bin/msgfmt
GREP = /usr/bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
INSTOBJEXT = .mo
INTLLIBS = 
LDFLAGS = 
LIBOBJS = 
LIBS = 
LN_S = ln -s
LTLIBOBJS = 
MAINT = #
MAKEINFO = ${SHELL} /home/iago/files/projects/sf/cssed/cssed/missing --run makeinfo
MKDIR_P = /usr/bin/mkdir -p
MKINSTALLDIRS = ./mkinstalldirs
MSGFMT = /usr/bin/msgfmt
MSGFMT_OPTS = -c
OBJEXT = o
PACKAGE = cssed
PACKAGE_BUGREPORT = 
PACKAGE_CFLAGS = -I/usr/include/gtk-2.0 -I/usr/lib64/gtk-2.0/include -I/usr/include/pango-1.0 -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -I/usr/include/fribidi -I/usr/include/cairo -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng16 -I/usr/include/uuid -I/usr/include/harfbuzz -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/atk-1.0 -I/usr/include/libxml2 -I/usr/include/vte-0.0 -I/usr/include/gio-unix-2.0/ -pthread  -DWITH_TERMINAL -DWITH_IPC_QUEUE -DWITH_HELP_MENUS -DWITH_SPLITTER_WINDOW -DGTK_IS_2_2 -DGTK_ATLEAST_2_4 -DGTK_ATLEAST_2_6
PACKAGE_LIBS = -lgthread-2.0 -lxml2 -Wl,--export-dynamic -lgmodule-2.0 -pthread -lglib-2.0 -lvte -lgtk-x11-2.0 -lgdk-x11-2.0 -lpangocairo-1.0 -latk-1.0 -lgdk_pixbuf-2.0 -lpangoft2-1.0 -lpango-1.0 -lfontconfig -lfreetype -lgio-2.0 -lgobject-2.0 -lglib-2.0 -lcairo -lX11 -lXext 
PACKAGE_NAME = 
PACKAGE_PREFIX = /usr
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
PKG_CONFIG = /usr/bin/pkg-config
POFILES =  es.po fr.po gl.po it.po de.po ca.po cs.po
POSUB = po
PO_IN_DATADIR_FALSE = 
PO_IN_DATADIR_TRUE = 
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
UPDATE_MIME_DATABASE = /usr/bin/update-mime-database
USE_NLS = yes
VERSION = 0.4.1
XGETTEXT = /usr/bin/xgettext
abs_builddir = /home/iago/files/projects/sf/cssed/cssed/scintilla/gtk
abs_srcdir = /home/iago/files/projects/sf/cssed/cssed/scintilla/gtk
abs_top_builddir = /home/iago/files/projects/sf/cssed/cssed
abs_top_srcdir = /home/iago/files/projects/sf/cssed/cssed
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-redhat-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = redhat
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-redhat-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = redhat
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = $(SHELL) /home/iago/files/projects/sf/cssed/cssed/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /usr/bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_builddir = ../..
top_srcdir = ../..
noinst_LIBRARIES = libscintilla.a
AM_CXXFLAGS = -DGTK -DGTK2 -DSCI_LEXER
LEXER_SRCS = \
../src/LexYAML.cxx \
../src/LexVHDL.cxx \
../src/LexVerilog.cxx \
../src/LexVB.cxx \
../src/LexTeX.cxx \
../src/LexTADS3.cxx \
../src/LexSQL.cxx \
../src/LexSpecman.cxx \
../src/LexSmalltalk.cxx \
../src/LexScriptol.cxx \
../src/LexRuby.cxx \
../src/LexRebol.cxx \
../src/LexPython.cxx \
../src/LexPS.cxx \
../src/LexPOV.cxx \
../src/LexPerl.cxx \
../src/LexPB.cxx \
../src/LexPascal.cxx \
../src/LexOthers.cxx \
../src/LexNsis.cxx \
../src/LexMSSQL.cxx \
../src/LexMPT.cxx \
../src/LexMMIXAL.cxx \
../src/LexMetapost.cxx \
../src/LexMatlab.cxx \
../src/LexLua.cxx \
../src/LexLout.cxx \
../src/LexLisp.cxx \
../src/LexKix.cxx \
../src/LexHTML.cxx \
../src/LexHaskell.cxx \
../src/LexGui4Cli.cxx \
../src/LexFortran.cxx \
../src/LexForth.cxx \
../src/LexFlagship.cxx \
../src/LexEScript.cxx \
../src/LexErlang.cxx \
../src/LexEiffel.cxx \
../src/LexCSS.cxx \
../src/LexCsound.cxx \
../src/LexCrontab.cxx \
../src/LexCPP.cxx \
../src/LexConf.cxx \
../src/LexCLW.cxx \
../src/LexCaml.cxx \
../src/LexBullant.cxx \
../src/LexBasic.cxx \
../src/LexBash.cxx \
../src/LexBaan.cxx \
../src/LexAVE.cxx \
../src/LexAU3.cxx \
../src/LexAsn1.cxx \
../src/LexAsm.cxx \
../src/LexAPDL.cxx \
../src/LexAda.cxx \
../src/LexInno.cxx \
../src/LexOpal.cxx \
../src/LexSpice.cxx \
../src/LexTCL.cxx \
../src/LexCmake.cxx \
../src/LexD.cxx \
../src/LexGAP.cxx \
../src/LexPLM.cxx  \
../src/LexProgress.cxx   \
../src/LexAbaqus.cxx  \
../src/LexASY.cxx  \
../src/LexR.cxx 

SRCS = \
../src/AutoComplete.cxx \
../src/CallTip.cxx \
../src/CellBuffer.cxx \
../src/CharClassify.cxx \
../src/ContractionState.cxx \
../src/Document.cxx \
../src/DocumentAccessor.cxx \
../src/Editor.cxx \
../src/ExternalLexer.cxx \
../src/Indicator.cxx \
../src/KeyMap.cxx \
../src/KeyWords.cxx \
../src/LineMarker.cxx \
../src/PositionCache.cxx \
../src/PropSet.cxx \
../src/RESearch.cxx \
../src/ScintillaBase.cxx \
../src/Style.cxx \
../src/StyleContext.cxx \
../src/UniConversion.cxx \
../src/ViewStyle.cxx \
../src/WindowAccessor.cxx \
../src/XPM.cxx \
../src/Decoration.cxx \
../src/RunStyles.cxx \
../src/*.h \
PlatGTK.cxx \
ScintillaGTK.cxx \
$(LEXER_SRCS)

libscintilla_a_SOURCES = $(SRCS) 
INCLUDES = -I$(top_srcdir) \
	-I$(top_srcdir)/scintilla/include \
	-I$(top_srcdir)/scintilla/gtk \
	-I$(top_srcdir)/scintilla/src \
	-I/usr/include/gtk-2.0 -I/usr/lib64/gtk-2.0/include -I/usr/include/pango-1.0 -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -I/usr/include/fribidi -I/usr/include/cairo -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng16 -I/usr/include/uuid -I/usr/include/harfbuzz -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/atk-1.0 -I/usr/include/libxml2 -I/usr/include/vte-0.0 -I/usr/include/gio-unix-2.0/ -pthread  -DWITH_TERMINAL -DWITH_IPC_QUEUE -DWITH_HELP_MENUS -DWITH_SPLITTER_WINDOW -DGTK_IS_2_2 -DGTK_ATLEAST_2_4 -DGTK_ATLEAST_2_6

libscintilla_a_LIBADD = scintilla-marshal.o
EXTRA_DIST = scintilla-marshal.list scintilla-marshal.c scintilla-marshal.h
all: all-am

.SUFFIXES:
.SUFFIXES: .cxx .o .obj
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  scintilla/gtk/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  scintilla/gtk/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

clean-noinstLIBRARIES:
	-test -z "$(noinst_LIBRARIES)" || rm -f $(noinst_LIBRARIES)
libscintilla.a: $(libscintilla_a_OBJECTS) $(libscintilla_a_DEPENDENCIES) 
	-rm -f libscintilla.a
	$(libscintilla_a_AR) libscintilla.a $(libscintilla_a_OBJECTS) $(libscintilla_a_LIBADD)
	$(RANLIB) libscintilla.a

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/AutoComplete.Po
include ./$(DEPDIR)/CallTip.Po
include ./$(DEPDIR)/CellBuffer.Po
include ./$(DEPDIR)/CharClassify.Po
include ./$(DEPDIR)/ContractionState.Po
include ./$(DEPDIR)/Decoration.Po
include ./$(DEPDIR)/Document.Po
include ./$(DEPDIR)/DocumentAccessor.Po
include ./$(DEPDIR)/Editor.Po
include ./$(DEPDIR)/ExternalLexer.Po
include ./$(DEPDIR)/Indicator.Po
include ./$(DEPDIR)/KeyMap.Po
include ./$(DEPDIR)/KeyWords.Po
include ./$(DEPDIR)/LexAPDL.Po
include ./$(DEPDIR)/LexASY.Po
include ./$(DEPDIR)/LexAU3.Po
include ./$(DEPDIR)/LexAVE.Po
include ./$(DEPDIR)/LexAbaqus.Po
include ./$(DEPDIR)/LexAda.Po
include ./$(DEPDIR)/LexAsm.Po
include ./$(DEPDIR)/LexAsn1.Po
include ./$(DEPDIR)/LexBaan.Po
include ./$(DEPDIR)/LexBash.Po
include ./$(DEPDIR)/LexBasic.Po
include ./$(DEPDIR)/LexBullant.Po
include ./$(DEPDIR)/LexCLW.Po
include ./$(DEPDIR)/LexCPP.Po
include ./$(DEPDIR)/LexCSS.Po
include ./$(DEPDIR)/LexCaml.Po
include ./$(DEPDIR)/LexCmake.Po
include ./$(DEPDIR)/LexConf.Po
include ./$(DEPDIR)/LexCrontab.Po
include ./$(DEPDIR)/LexCsound.Po
include ./$(DEPDIR)/LexD.Po
include ./$(DEPDIR)/LexEScript.Po
include ./$(DEPDIR)/LexEiffel.Po
include ./$(DEPDIR)/LexErlang.Po
include ./$(DEPDIR)/LexFlagship.Po
include ./$(DEPDIR)/LexForth.Po
include ./$(DEPDIR)/LexFortran.Po
include ./$(DEPDIR)/LexGAP.Po
include ./$(DEPDIR)/LexGui4Cli.Po
include ./$(DEPDIR)/LexHTML.Po
include ./$(DEPDIR)/LexHaskell.Po
include ./$(DEPDIR)/LexInno.Po
include ./$(DEPDIR)/LexKix.Po
include ./$(DEPDIR)/LexLisp.Po
include ./$(DEPDIR)/LexLout.Po
include ./$(DEPDIR)/LexLua.Po
include ./$(DEPDIR)/LexMMIXAL.Po
include ./$(DEPDIR)/LexMPT.Po
include ./$(DEPDIR)/LexMSSQL.Po
include ./$(DEPDIR)/LexMatlab.Po
include ./$(DEPDIR)/LexMetapost.Po
include ./$(DEPDIR)/LexNsis.Po
include ./$(DEPDIR)/LexOpal.Po
include ./$(DEPDIR)/LexOthers.Po
include ./$(DEPDIR)/LexPB.Po
include ./$(DEPDIR)/LexPLM.Po
include ./$(DEPDIR)/LexPOV.Po
include ./$(DEPDIR)/LexPS.Po
include ./$(DEPDIR)/LexPascal.Po
include ./$(DEPDIR)/LexPerl.Po
include ./$(DEPDIR)/LexProgress.Po
include ./$(DEPDIR)/LexPython.Po
include ./$(DEPDIR)/LexR.Po
include ./$(DEPDIR)/LexRebol.Po
include ./$(DEPDIR)/LexRuby.Po
include ./$(DEPDIR)/LexSQL.Po
include ./$(DEPDIR)/LexScriptol.Po
include ./$(DEPDIR)/LexSmalltalk.Po
include ./$(DEPDIR)/LexSpecman.Po
include ./$(DEPDIR)/LexSpice.Po
include ./$(DEPDIR)/LexTADS3.Po
include ./$(DEPDIR)/LexTCL.Po
include ./$(DEPDIR)/LexTeX.Po
include ./$(DEPDIR)/LexVB.Po
include ./$(DEPDIR)/LexVHDL.Po
include ./$(DEPDIR)/LexVerilog.Po
include ./$(DEPDIR)/LexYAML.Po
include ./$(DEPDIR)/LineMarker.Po
include ./$(DEPDIR)/PlatGTK.Po
include ./$(DEPDIR)/PositionCache.Po
include ./$(DEPDIR)/PropSet.Po
include ./$(DEPDIR)/RESearch.Po
include ./$(DEPDIR)/RunStyles.Po
include ./$(DEPDIR)/ScintillaBase.Po
include ./$(DEPDIR)/ScintillaGTK.Po
include ./$(DEPDIR)/Style.Po
include ./$(DEPDIR)/StyleContext.Po
include ./$(DEPDIR)/UniConversion.Po
include ./$(DEPDIR)/ViewStyle.Po
include ./$(DEPDIR)/WindowAccessor.Po
include ./$(DEPDIR)/XPM.Po

.cxx.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cxx.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

AutoComplete.o: ../src/AutoComplete.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AutoComplete.o -MD -MP -MF $(DEPDIR)/AutoComplete.Tpo -c -o AutoComplete.o `test -f '../src/AutoComplete.cxx' || echo '$(srcdir)/'`../src/AutoComplete.cxx
	mv -f $(DEPDIR)/AutoComplete.Tpo $(DEPDIR)/AutoComplete.Po
#	source='../src/AutoComplete.cxx' object='AutoComplete.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AutoComplete.o `test -f '../src/AutoComplete.cxx' || echo '$(srcdir)/'`../src/AutoComplete.cxx

AutoComplete.obj: ../src/AutoComplete.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT AutoComplete.obj -MD -MP -MF $(DEPDIR)/AutoComplete.Tpo -c -o AutoComplete.obj `if test -f '../src/AutoComplete.cxx'; then $(CYGPATH_W) '../src/AutoComplete.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/AutoComplete.cxx'; fi`
	mv -f $(DEPDIR)/AutoComplete.Tpo $(DEPDIR)/AutoComplete.Po
#	source='../src/AutoComplete.cxx' object='AutoComplete.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o AutoComplete.obj `if test -f '../src/AutoComplete.cxx'; then $(CYGPATH_W) '../src/AutoComplete.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/AutoComplete.cxx'; fi`

CallTip.o: ../src/CallTip.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CallTip.o -MD -MP -MF $(DEPDIR)/CallTip.Tpo -c -o CallTip.o `test -f '../src/CallTip.cxx' || echo '$(srcdir)/'`../src/CallTip.cxx
	mv -f $(DEPDIR)/CallTip.Tpo $(DEPDIR)/CallTip.Po
#	source='../src/CallTip.cxx' object='CallTip.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CallTip.o `test -f '../src/CallTip.cxx' || echo '$(srcdir)/'`../src/CallTip.cxx

CallTip.obj: ../src/CallTip.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CallTip.obj -MD -MP -MF $(DEPDIR)/CallTip.Tpo -c -o CallTip.obj `if test -f '../src/CallTip.cxx'; then $(CYGPATH_W) '../src/CallTip.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/CallTip.cxx'; fi`
	mv -f $(DEPDIR)/CallTip.Tpo $(DEPDIR)/CallTip.Po
#	source='../src/CallTip.cxx' object='CallTip.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CallTip.obj `if test -f '../src/CallTip.cxx'; then $(CYGPATH_W) '../src/CallTip.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/CallTip.cxx'; fi`

CellBuffer.o: ../src/CellBuffer.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CellBuffer.o -MD -MP -MF $(DEPDIR)/CellBuffer.Tpo -c -o CellBuffer.o `test -f '../src/CellBuffer.cxx' || echo '$(srcdir)/'`../src/CellBuffer.cxx
	mv -f $(DEPDIR)/CellBuffer.Tpo $(DEPDIR)/CellBuffer.Po
#	source='../src/CellBuffer.cxx' object='CellBuffer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CellBuffer.o `test -f '../src/CellBuffer.cxx' || echo '$(srcdir)/'`../src/CellBuffer.cxx

CellBuffer.obj: ../src/CellBuffer.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CellBuffer.obj -MD -MP -MF $(DEPDIR)/CellBuffer.Tpo -c -o CellBuffer.obj `if test -f '../src/CellBuffer.cxx'; then $(CYGPATH_W) '../src/CellBuffer.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/CellBuffer.cxx'; fi`
	mv -f $(DEPDIR)/CellBuffer.Tpo $(DEPDIR)/CellBuffer.Po
#	source='../src/CellBuffer.cxx' object='CellBuffer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CellBuffer.obj `if test -f '../src/CellBuffer.cxx'; then $(CYGPATH_W) '../src/CellBuffer.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/CellBuffer.cxx'; fi`

CharClassify.o: ../src/CharClassify.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CharClassify.o -MD -MP -MF $(DEPDIR)/CharClassify.Tpo -c -o CharClassify.o `test -f '../src/CharClassify.cxx' || echo '$(srcdir)/'`../src/CharClassify.cxx
	mv -f $(DEPDIR)/CharClassify.Tpo $(DEPDIR)/CharClassify.Po
#	source='../src/CharClassify.cxx' object='CharClassify.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CharClassify.o `test -f '../src/CharClassify.cxx' || echo '$(srcdir)/'`../src/CharClassify.cxx

CharClassify.obj: ../src/CharClassify.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CharClassify.obj -MD -MP -MF $(DEPDIR)/CharClassify.Tpo -c -o CharClassify.obj `if test -f '../src/CharClassify.cxx'; then $(CYGPATH_W) '../src/CharClassify.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/CharClassify.cxx'; fi`
	mv -f $(DEPDIR)/CharClassify.Tpo $(DEPDIR)/CharClassify.Po
#	source='../src/CharClassify.cxx' object='CharClassify.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CharClassify.obj `if test -f '../src/CharClassify.cxx'; then $(CYGPATH_W) '../src/CharClassify.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/CharClassify.cxx'; fi`

ContractionState.o: ../src/ContractionState.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ContractionState.o -MD -MP -MF $(DEPDIR)/ContractionState.Tpo -c -o ContractionState.o `test -f '../src/ContractionState.cxx' || echo '$(srcdir)/'`../src/ContractionState.cxx
	mv -f $(DEPDIR)/ContractionState.Tpo $(DEPDIR)/ContractionState.Po
#	source='../src/ContractionState.cxx' object='ContractionState.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ContractionState.o `test -f '../src/ContractionState.cxx' || echo '$(srcdir)/'`../src/ContractionState.cxx

ContractionState.obj: ../src/ContractionState.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ContractionState.obj -MD -MP -MF $(DEPDIR)/ContractionState.Tpo -c -o ContractionState.obj `if test -f '../src/ContractionState.cxx'; then $(CYGPATH_W) '../src/ContractionState.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/ContractionState.cxx'; fi`
	mv -f $(DEPDIR)/ContractionState.Tpo $(DEPDIR)/ContractionState.Po
#	source='../src/ContractionState.cxx' object='ContractionState.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ContractionState.obj `if test -f '../src/ContractionState.cxx'; then $(CYGPATH_W) '../src/ContractionState.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/ContractionState.cxx'; fi`

Document.o: ../src/Document.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Document.o -MD -MP -MF $(DEPDIR)/Document.Tpo -c -o Document.o `test -f '../src/Document.cxx' || echo '$(srcdir)/'`../src/Document.cxx
	mv -f $(DEPDIR)/Document.Tpo $(DEPDIR)/Document.Po
#	source='../src/Document.cxx' object='Document.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Document.o `test -f '../src/Document.cxx' || echo '$(srcdir)/'`../src/Document.cxx

Document.obj: ../src/Document.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Document.obj -MD -MP -MF $(DEPDIR)/Document.Tpo -c -o Document.obj `if test -f '../src/Document.cxx'; then $(CYGPATH_W) '../src/Document.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/Document.cxx'; fi`
	mv -f $(DEPDIR)/Document.Tpo $(DEPDIR)/Document.Po
#	source='../src/Document.cxx' object='Document.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Document.obj `if test -f '../src/Document.cxx'; then $(CYGPATH_W) '../src/Document.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/Document.cxx'; fi`

DocumentAccessor.o: ../src/DocumentAccessor.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DocumentAccessor.o -MD -MP -MF $(DEPDIR)/DocumentAccessor.Tpo -c -o DocumentAccessor.o `test -f '../src/DocumentAccessor.cxx' || echo '$(srcdir)/'`../src/DocumentAccessor.cxx
	mv -f $(DEPDIR)/DocumentAccessor.Tpo $(DEPDIR)/DocumentAccessor.Po
#	source='../src/DocumentAccessor.cxx' object='DocumentAccessor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DocumentAccessor.o `test -f '../src/DocumentAccessor.cxx' || echo '$(srcdir)/'`../src/DocumentAccessor.cxx

DocumentAccessor.obj: ../src/DocumentAccessor.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT DocumentAccessor.obj -MD -MP -MF $(DEPDIR)/DocumentAccessor.Tpo -c -o DocumentAccessor.obj `if test -f '../src/DocumentAccessor.cxx'; then $(CYGPATH_W) '../src/DocumentAccessor.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/DocumentAccessor.cxx'; fi`
	mv -f $(DEPDIR)/DocumentAccessor.Tpo $(DEPDIR)/DocumentAccessor.Po
#	source='../src/DocumentAccessor.cxx' object='DocumentAccessor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o DocumentAccessor.obj `if test -f '../src/DocumentAccessor.cxx'; then $(CYGPATH_W) '../src/DocumentAccessor.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/DocumentAccessor.cxx'; fi`

Editor.o: ../src/Editor.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Editor.o -MD -MP -MF $(DEPDIR)/Editor.Tpo -c -o Editor.o `test -f '../src/Editor.cxx' || echo '$(srcdir)/'`../src/Editor.cxx
	mv -f $(DEPDIR)/Editor.Tpo $(DEPDIR)/Editor.Po
#	source='../src/Editor.cxx' object='Editor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Editor.o `test -f '../src/Editor.cxx' || echo '$(srcdir)/'`../src/Editor.cxx

Editor.obj: ../src/Editor.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Editor.obj -MD -MP -MF $(DEPDIR)/Editor.Tpo -c -o Editor.obj `if test -f '../src/Editor.cxx'; then $(CYGPATH_W) '../src/Editor.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/Editor.cxx'; fi`
	mv -f $(DEPDIR)/Editor.Tpo $(DEPDIR)/Editor.Po
#	source='../src/Editor.cxx' object='Editor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Editor.obj `if test -f '../src/Editor.cxx'; then $(CYGPATH_W) '../src/Editor.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/Editor.cxx'; fi`

ExternalLexer.o: ../src/ExternalLexer.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ExternalLexer.o -MD -MP -MF $(DEPDIR)/ExternalLexer.Tpo -c -o ExternalLexer.o `test -f '../src/ExternalLexer.cxx' || echo '$(srcdir)/'`../src/ExternalLexer.cxx
	mv -f $(DEPDIR)/ExternalLexer.Tpo $(DEPDIR)/ExternalLexer.Po
#	source='../src/ExternalLexer.cxx' object='ExternalLexer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ExternalLexer.o `test -f '../src/ExternalLexer.cxx' || echo '$(srcdir)/'`../src/ExternalLexer.cxx

ExternalLexer.obj: ../src/ExternalLexer.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ExternalLexer.obj -MD -MP -MF $(DEPDIR)/ExternalLexer.Tpo -c -o ExternalLexer.obj `if test -f '../src/ExternalLexer.cxx'; then $(CYGPATH_W) '../src/ExternalLexer.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/ExternalLexer.cxx'; fi`
	mv -f $(DEPDIR)/ExternalLexer.Tpo $(DEPDIR)/ExternalLexer.Po
#	source='../src/ExternalLexer.cxx' object='ExternalLexer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ExternalLexer.obj `if test -f '../src/ExternalLexer.cxx'; then $(CYGPATH_W) '../src/ExternalLexer.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/ExternalLexer.cxx'; fi`

Indicator.o: ../src/Indicator.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Indicator.o -MD -MP -MF $(DEPDIR)/Indicator.Tpo -c -o Indicator.o `test -f '../src/Indicator.cxx' || echo '$(srcdir)/'`../src/Indicator.cxx
	mv -f $(DEPDIR)/Indicator.Tpo $(DEPDIR)/Indicator.Po
#	source='../src/Indicator.cxx' object='Indicator.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Indicator.o `test -f '../src/Indicator.cxx' || echo '$(srcdir)/'`../src/Indicator.cxx

Indicator.obj: ../src/Indicator.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Indicator.obj -MD -MP -MF $(DEPDIR)/Indicator.Tpo -c -o Indicator.obj `if test -f '../src/Indicator.cxx'; then $(CYGPATH_W) '../src/Indicator.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/Indicator.cxx'; fi`
	mv -f $(DEPDIR)/Indicator.Tpo $(DEPDIR)/Indicator.Po
#	source='../src/Indicator.cxx' object='Indicator.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Indicator.obj `if test -f '../src/Indicator.cxx'; then $(CYGPATH_W) '../src/Indicator.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/Indicator.cxx'; fi`

KeyMap.o: ../src/KeyMap.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT KeyMap.o -MD -MP -MF $(DEPDIR)/KeyMap.Tpo -c -o KeyMap.o `test -f '../src/KeyMap.cxx' || echo '$(srcdir)/'`../src/KeyMap.cxx
	mv -f $(DEPDIR)/KeyMap.Tpo $(DEPDIR)/KeyMap.Po
#	source='../src/KeyMap.cxx' object='KeyMap.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o KeyMap.o `test -f '../src/KeyMap.cxx' || echo '$(srcdir)/'`../src/KeyMap.cxx

KeyMap.obj: ../src/KeyMap.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT KeyMap.obj -MD -MP -MF $(DEPDIR)/KeyMap.Tpo -c -o KeyMap.obj `if test -f '../src/KeyMap.cxx'; then $(CYGPATH_W) '../src/KeyMap.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/KeyMap.cxx'; fi`
	mv -f $(DEPDIR)/KeyMap.Tpo $(DEPDIR)/KeyMap.Po
#	source='../src/KeyMap.cxx' object='KeyMap.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o KeyMap.obj `if test -f '../src/KeyMap.cxx'; then $(CYGPATH_W) '../src/KeyMap.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/KeyMap.cxx'; fi`

KeyWords.o: ../src/KeyWords.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT KeyWords.o -MD -MP -MF $(DEPDIR)/KeyWords.Tpo -c -o KeyWords.o `test -f '../src/KeyWords.cxx' || echo '$(srcdir)/'`../src/KeyWords.cxx
	mv -f $(DEPDIR)/KeyWords.Tpo $(DEPDIR)/KeyWords.Po
#	source='../src/KeyWords.cxx' object='KeyWords.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o KeyWords.o `test -f '../src/KeyWords.cxx' || echo '$(srcdir)/'`../src/KeyWords.cxx

KeyWords.obj: ../src/KeyWords.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT KeyWords.obj -MD -MP -MF $(DEPDIR)/KeyWords.Tpo -c -o KeyWords.obj `if test -f '../src/KeyWords.cxx'; then $(CYGPATH_W) '../src/KeyWords.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/KeyWords.cxx'; fi`
	mv -f $(DEPDIR)/KeyWords.Tpo $(DEPDIR)/KeyWords.Po
#	source='../src/KeyWords.cxx' object='KeyWords.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o KeyWords.obj `if test -f '../src/KeyWords.cxx'; then $(CYGPATH_W) '../src/KeyWords.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/KeyWords.cxx'; fi`

LineMarker.o: ../src/LineMarker.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LineMarker.o -MD -MP -MF $(DEPDIR)/LineMarker.Tpo -c -o LineMarker.o `test -f '../src/LineMarker.cxx' || echo '$(srcdir)/'`../src/LineMarker.cxx
	mv -f $(DEPDIR)/LineMarker.Tpo $(DEPDIR)/LineMarker.Po
#	source='../src/LineMarker.cxx' object='LineMarker.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LineMarker.o `test -f '../src/LineMarker.cxx' || echo '$(srcdir)/'`../src/LineMarker.cxx

LineMarker.obj: ../src/LineMarker.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LineMarker.obj -MD -MP -MF $(DEPDIR)/LineMarker.Tpo -c -o LineMarker.obj `if test -f '../src/LineMarker.cxx'; then $(CYGPATH_W) '../src/LineMarker.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LineMarker.cxx'; fi`
	mv -f $(DEPDIR)/LineMarker.Tpo $(DEPDIR)/LineMarker.Po
#	source='../src/LineMarker.cxx' object='LineMarker.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LineMarker.obj `if test -f '../src/LineMarker.cxx'; then $(CYGPATH_W) '../src/LineMarker.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LineMarker.cxx'; fi`

PositionCache.o: ../src/PositionCache.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PositionCache.o -MD -MP -MF $(DEPDIR)/PositionCache.Tpo -c -o PositionCache.o `test -f '../src/PositionCache.cxx' || echo '$(srcdir)/'`../src/PositionCache.cxx
	mv -f $(DEPDIR)/PositionCache.Tpo $(DEPDIR)/PositionCache.Po
#	source='../src/PositionCache.cxx' object='PositionCache.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PositionCache.o `test -f '../src/PositionCache.cxx' || echo '$(srcdir)/'`../src/PositionCache.cxx

PositionCache.obj: ../src/PositionCache.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PositionCache.obj -MD -MP -MF $(DEPDIR)/PositionCache.Tpo -c -o PositionCache.obj `if test -f '../src/PositionCache.cxx'; then $(CYGPATH_W) '../src/PositionCache.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/PositionCache.cxx'; fi`
	mv -f $(DEPDIR)/PositionCache.Tpo $(DEPDIR)/PositionCache.Po
#	source='../src/PositionCache.cxx' object='PositionCache.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PositionCache.obj `if test -f '../src/PositionCache.cxx'; then $(CYGPATH_W) '../src/PositionCache.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/PositionCache.cxx'; fi`

PropSet.o: ../src/PropSet.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PropSet.o -MD -MP -MF $(DEPDIR)/PropSet.Tpo -c -o PropSet.o `test -f '../src/PropSet.cxx' || echo '$(srcdir)/'`../src/PropSet.cxx
	mv -f $(DEPDIR)/PropSet.Tpo $(DEPDIR)/PropSet.Po
#	source='../src/PropSet.cxx' object='PropSet.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PropSet.o `test -f '../src/PropSet.cxx' || echo '$(srcdir)/'`../src/PropSet.cxx

PropSet.obj: ../src/PropSet.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PropSet.obj -MD -MP -MF $(DEPDIR)/PropSet.Tpo -c -o PropSet.obj `if test -f '../src/PropSet.cxx'; then $(CYGPATH_W) '../src/PropSet.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/PropSet.cxx'; fi`
	mv -f $(DEPDIR)/PropSet.Tpo $(DEPDIR)/PropSet.Po
#	source='../src/PropSet.cxx' object='PropSet.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PropSet.obj `if test -f '../src/PropSet.cxx'; then $(CYGPATH_W) '../src/PropSet.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/PropSet.cxx'; fi`

RESearch.o: ../src/RESearch.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RESearch.o -MD -MP -MF $(DEPDIR)/RESearch.Tpo -c -o RESearch.o `test -f '../src/RESearch.cxx' || echo '$(srcdir)/'`../src/RESearch.cxx
	mv -f $(DEPDIR)/RESearch.Tpo $(DEPDIR)/RESearch.Po
#	source='../src/RESearch.cxx' object='RESearch.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RESearch.o `test -f '../src/RESearch.cxx' || echo '$(srcdir)/'`../src/RESearch.cxx

RESearch.obj: ../src/RESearch.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RESearch.obj -MD -MP -MF $(DEPDIR)/RESearch.Tpo -c -o RESearch.obj `if test -f '../src/RESearch.cxx'; then $(CYGPATH_W) '../src/RESearch.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/RESearch.cxx'; fi`
	mv -f $(DEPDIR)/RESearch.Tpo $(DEPDIR)/RESearch.Po
#	source='../src/RESearch.cxx' object='RESearch.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RESearch.obj `if test -f '../src/RESearch.cxx'; then $(CYGPATH_W) '../src/RESearch.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/RESearch.cxx'; fi`

ScintillaBase.o: ../src/ScintillaBase.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ScintillaBase.o -MD -MP -MF $(DEPDIR)/ScintillaBase.Tpo -c -o ScintillaBase.o `test -f '../src/ScintillaBase.cxx' || echo '$(srcdir)/'`../src/ScintillaBase.cxx
	mv -f $(DEPDIR)/ScintillaBase.Tpo $(DEPDIR)/ScintillaBase.Po
#	source='../src/ScintillaBase.cxx' object='ScintillaBase.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ScintillaBase.o `test -f '../src/ScintillaBase.cxx' || echo '$(srcdir)/'`../src/ScintillaBase.cxx

ScintillaBase.obj: ../src/ScintillaBase.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ScintillaBase.obj -MD -MP -MF $(DEPDIR)/ScintillaBase.Tpo -c -o ScintillaBase.obj `if test -f '../src/ScintillaBase.cxx'; then $(CYGPATH_W) '../src/ScintillaBase.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/ScintillaBase.cxx'; fi`
	mv -f $(DEPDIR)/ScintillaBase.Tpo $(DEPDIR)/ScintillaBase.Po
#	source='../src/ScintillaBase.cxx' object='ScintillaBase.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ScintillaBase.obj `if test -f '../src/ScintillaBase.cxx'; then $(CYGPATH_W) '../src/ScintillaBase.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/ScintillaBase.cxx'; fi`

Style.o: ../src/Style.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Style.o -MD -MP -MF $(DEPDIR)/Style.Tpo -c -o Style.o `test -f '../src/Style.cxx' || echo '$(srcdir)/'`../src/Style.cxx
	mv -f $(DEPDIR)/Style.Tpo $(DEPDIR)/Style.Po
#	source='../src/Style.cxx' object='Style.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Style.o `test -f '../src/Style.cxx' || echo '$(srcdir)/'`../src/Style.cxx

Style.obj: ../src/Style.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Style.obj -MD -MP -MF $(DEPDIR)/Style.Tpo -c -o Style.obj `if test -f '../src/Style.cxx'; then $(CYGPATH_W) '../src/Style.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/Style.cxx'; fi`
	mv -f $(DEPDIR)/Style.Tpo $(DEPDIR)/Style.Po
#	source='../src/Style.cxx' object='Style.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Style.obj `if test -f '../src/Style.cxx'; then $(CYGPATH_W) '../src/Style.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/Style.cxx'; fi`

StyleContext.o: ../src/StyleContext.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT StyleContext.o -MD -MP -MF $(DEPDIR)/StyleContext.Tpo -c -o StyleContext.o `test -f '../src/StyleContext.cxx' || echo '$(srcdir)/'`../src/StyleContext.cxx
	mv -f $(DEPDIR)/StyleContext.Tpo $(DEPDIR)/StyleContext.Po
#	source='../src/StyleContext.cxx' object='StyleContext.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o StyleContext.o `test -f '../src/StyleContext.cxx' || echo '$(srcdir)/'`../src/StyleContext.cxx

StyleContext.obj: ../src/StyleContext.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT StyleContext.obj -MD -MP -MF $(DEPDIR)/StyleContext.Tpo -c -o StyleContext.obj `if test -f '../src/StyleContext.cxx'; then $(CYGPATH_W) '../src/StyleContext.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/StyleContext.cxx'; fi`
	mv -f $(DEPDIR)/StyleContext.Tpo $(DEPDIR)/StyleContext.Po
#	source='../src/StyleContext.cxx' object='StyleContext.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o StyleContext.obj `if test -f '../src/StyleContext.cxx'; then $(CYGPATH_W) '../src/StyleContext.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/StyleContext.cxx'; fi`

UniConversion.o: ../src/UniConversion.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT UniConversion.o -MD -MP -MF $(DEPDIR)/UniConversion.Tpo -c -o UniConversion.o `test -f '../src/UniConversion.cxx' || echo '$(srcdir)/'`../src/UniConversion.cxx
	mv -f $(DEPDIR)/UniConversion.Tpo $(DEPDIR)/UniConversion.Po
#	source='../src/UniConversion.cxx' object='UniConversion.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o UniConversion.o `test -f '../src/UniConversion.cxx' || echo '$(srcdir)/'`../src/UniConversion.cxx

UniConversion.obj: ../src/UniConversion.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT UniConversion.obj -MD -MP -MF $(DEPDIR)/UniConversion.Tpo -c -o UniConversion.obj `if test -f '../src/UniConversion.cxx'; then $(CYGPATH_W) '../src/UniConversion.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/UniConversion.cxx'; fi`
	mv -f $(DEPDIR)/UniConversion.Tpo $(DEPDIR)/UniConversion.Po
#	source='../src/UniConversion.cxx' object='UniConversion.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o UniConversion.obj `if test -f '../src/UniConversion.cxx'; then $(CYGPATH_W) '../src/UniConversion.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/UniConversion.cxx'; fi`

ViewStyle.o: ../src/ViewStyle.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ViewStyle.o -MD -MP -MF $(DEPDIR)/ViewStyle.Tpo -c -o ViewStyle.o `test -f '../src/ViewStyle.cxx' || echo '$(srcdir)/'`../src/ViewStyle.cxx
	mv -f $(DEPDIR)/ViewStyle.Tpo $(DEPDIR)/ViewStyle.Po
#	source='../src/ViewStyle.cxx' object='ViewStyle.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ViewStyle.o `test -f '../src/ViewStyle.cxx' || echo '$(srcdir)/'`../src/ViewStyle.cxx

ViewStyle.obj: ../src/ViewStyle.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ViewStyle.obj -MD -MP -MF $(DEPDIR)/ViewStyle.Tpo -c -o ViewStyle.obj `if test -f '../src/ViewStyle.cxx'; then $(CYGPATH_W) '../src/ViewStyle.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/ViewStyle.cxx'; fi`
	mv -f $(DEPDIR)/ViewStyle.Tpo $(DEPDIR)/ViewStyle.Po
#	source='../src/ViewStyle.cxx' object='ViewStyle.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ViewStyle.obj `if test -f '../src/ViewStyle.cxx'; then $(CYGPATH_W) '../src/ViewStyle.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/ViewStyle.cxx'; fi`

WindowAccessor.o: ../src/WindowAccessor.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT WindowAccessor.o -MD -MP -MF $(DEPDIR)/WindowAccessor.Tpo -c -o WindowAccessor.o `test -f '../src/WindowAccessor.cxx' || echo '$(srcdir)/'`../src/WindowAccessor.cxx
	mv -f $(DEPDIR)/WindowAccessor.Tpo $(DEPDIR)/WindowAccessor.Po
#	source='../src/WindowAccessor.cxx' object='WindowAccessor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o WindowAccessor.o `test -f '../src/WindowAccessor.cxx' || echo '$(srcdir)/'`../src/WindowAccessor.cxx

WindowAccessor.obj: ../src/WindowAccessor.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT WindowAccessor.obj -MD -MP -MF $(DEPDIR)/WindowAccessor.Tpo -c -o WindowAccessor.obj `if test -f '../src/WindowAccessor.cxx'; then $(CYGPATH_W) '../src/WindowAccessor.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/WindowAccessor.cxx'; fi`
	mv -f $(DEPDIR)/WindowAccessor.Tpo $(DEPDIR)/WindowAccessor.Po
#	source='../src/WindowAccessor.cxx' object='WindowAccessor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o WindowAccessor.obj `if test -f '../src/WindowAccessor.cxx'; then $(CYGPATH_W) '../src/WindowAccessor.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/WindowAccessor.cxx'; fi`

XPM.o: ../src/XPM.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XPM.o -MD -MP -MF $(DEPDIR)/XPM.Tpo -c -o XPM.o `test -f '../src/XPM.cxx' || echo '$(srcdir)/'`../src/XPM.cxx
	mv -f $(DEPDIR)/XPM.Tpo $(DEPDIR)/XPM.Po
#	source='../src/XPM.cxx' object='XPM.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XPM.o `test -f '../src/XPM.cxx' || echo '$(srcdir)/'`../src/XPM.cxx

XPM.obj: ../src/XPM.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT XPM.obj -MD -MP -MF $(DEPDIR)/XPM.Tpo -c -o XPM.obj `if test -f '../src/XPM.cxx'; then $(CYGPATH_W) '../src/XPM.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/XPM.cxx'; fi`
	mv -f $(DEPDIR)/XPM.Tpo $(DEPDIR)/XPM.Po
#	source='../src/XPM.cxx' object='XPM.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o XPM.obj `if test -f '../src/XPM.cxx'; then $(CYGPATH_W) '../src/XPM.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/XPM.cxx'; fi`

Decoration.o: ../src/Decoration.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Decoration.o -MD -MP -MF $(DEPDIR)/Decoration.Tpo -c -o Decoration.o `test -f '../src/Decoration.cxx' || echo '$(srcdir)/'`../src/Decoration.cxx
	mv -f $(DEPDIR)/Decoration.Tpo $(DEPDIR)/Decoration.Po
#	source='../src/Decoration.cxx' object='Decoration.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Decoration.o `test -f '../src/Decoration.cxx' || echo '$(srcdir)/'`../src/Decoration.cxx

Decoration.obj: ../src/Decoration.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Decoration.obj -MD -MP -MF $(DEPDIR)/Decoration.Tpo -c -o Decoration.obj `if test -f '../src/Decoration.cxx'; then $(CYGPATH_W) '../src/Decoration.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/Decoration.cxx'; fi`
	mv -f $(DEPDIR)/Decoration.Tpo $(DEPDIR)/Decoration.Po
#	source='../src/Decoration.cxx' object='Decoration.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Decoration.obj `if test -f '../src/Decoration.cxx'; then $(CYGPATH_W) '../src/Decoration.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/Decoration.cxx'; fi`

RunStyles.o: ../src/RunStyles.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RunStyles.o -MD -MP -MF $(DEPDIR)/RunStyles.Tpo -c -o RunStyles.o `test -f '../src/RunStyles.cxx' || echo '$(srcdir)/'`../src/RunStyles.cxx
	mv -f $(DEPDIR)/RunStyles.Tpo $(DEPDIR)/RunStyles.Po
#	source='../src/RunStyles.cxx' object='RunStyles.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RunStyles.o `test -f '../src/RunStyles.cxx' || echo '$(srcdir)/'`../src/RunStyles.cxx

RunStyles.obj: ../src/RunStyles.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RunStyles.obj -MD -MP -MF $(DEPDIR)/RunStyles.Tpo -c -o RunStyles.obj `if test -f '../src/RunStyles.cxx'; then $(CYGPATH_W) '../src/RunStyles.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/RunStyles.cxx'; fi`
	mv -f $(DEPDIR)/RunStyles.Tpo $(DEPDIR)/RunStyles.Po
#	source='../src/RunStyles.cxx' object='RunStyles.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RunStyles.obj `if test -f '../src/RunStyles.cxx'; then $(CYGPATH_W) '../src/RunStyles.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/RunStyles.cxx'; fi`

LexYAML.o: ../src/LexYAML.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexYAML.o -MD -MP -MF $(DEPDIR)/LexYAML.Tpo -c -o LexYAML.o `test -f '../src/LexYAML.cxx' || echo '$(srcdir)/'`../src/LexYAML.cxx
	mv -f $(DEPDIR)/LexYAML.Tpo $(DEPDIR)/LexYAML.Po
#	source='../src/LexYAML.cxx' object='LexYAML.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexYAML.o `test -f '../src/LexYAML.cxx' || echo '$(srcdir)/'`../src/LexYAML.cxx

LexYAML.obj: ../src/LexYAML.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexYAML.obj -MD -MP -MF $(DEPDIR)/LexYAML.Tpo -c -o LexYAML.obj `if test -f '../src/LexYAML.cxx'; then $(CYGPATH_W) '../src/LexYAML.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexYAML.cxx'; fi`
	mv -f $(DEPDIR)/LexYAML.Tpo $(DEPDIR)/LexYAML.Po
#	source='../src/LexYAML.cxx' object='LexYAML.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexYAML.obj `if test -f '../src/LexYAML.cxx'; then $(CYGPATH_W) '../src/LexYAML.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexYAML.cxx'; fi`

LexVHDL.o: ../src/LexVHDL.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexVHDL.o -MD -MP -MF $(DEPDIR)/LexVHDL.Tpo -c -o LexVHDL.o `test -f '../src/LexVHDL.cxx' || echo '$(srcdir)/'`../src/LexVHDL.cxx
	mv -f $(DEPDIR)/LexVHDL.Tpo $(DEPDIR)/LexVHDL.Po
#	source='../src/LexVHDL.cxx' object='LexVHDL.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexVHDL.o `test -f '../src/LexVHDL.cxx' || echo '$(srcdir)/'`../src/LexVHDL.cxx

LexVHDL.obj: ../src/LexVHDL.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexVHDL.obj -MD -MP -MF $(DEPDIR)/LexVHDL.Tpo -c -o LexVHDL.obj `if test -f '../src/LexVHDL.cxx'; then $(CYGPATH_W) '../src/LexVHDL.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexVHDL.cxx'; fi`
	mv -f $(DEPDIR)/LexVHDL.Tpo $(DEPDIR)/LexVHDL.Po
#	source='../src/LexVHDL.cxx' object='LexVHDL.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexVHDL.obj `if test -f '../src/LexVHDL.cxx'; then $(CYGPATH_W) '../src/LexVHDL.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexVHDL.cxx'; fi`

LexVerilog.o: ../src/LexVerilog.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexVerilog.o -MD -MP -MF $(DEPDIR)/LexVerilog.Tpo -c -o LexVerilog.o `test -f '../src/LexVerilog.cxx' || echo '$(srcdir)/'`../src/LexVerilog.cxx
	mv -f $(DEPDIR)/LexVerilog.Tpo $(DEPDIR)/LexVerilog.Po
#	source='../src/LexVerilog.cxx' object='LexVerilog.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexVerilog.o `test -f '../src/LexVerilog.cxx' || echo '$(srcdir)/'`../src/LexVerilog.cxx

LexVerilog.obj: ../src/LexVerilog.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexVerilog.obj -MD -MP -MF $(DEPDIR)/LexVerilog.Tpo -c -o LexVerilog.obj `if test -f '../src/LexVerilog.cxx'; then $(CYGPATH_W) '../src/LexVerilog.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexVerilog.cxx'; fi`
	mv -f $(DEPDIR)/LexVerilog.Tpo $(DEPDIR)/LexVerilog.Po
#	source='../src/LexVerilog.cxx' object='LexVerilog.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexVerilog.obj `if test -f '../src/LexVerilog.cxx'; then $(CYGPATH_W) '../src/LexVerilog.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexVerilog.cxx'; fi`

LexVB.o: ../src/LexVB.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexVB.o -MD -MP -MF $(DEPDIR)/LexVB.Tpo -c -o LexVB.o `test -f '../src/LexVB.cxx' || echo '$(srcdir)/'`../src/LexVB.cxx
	mv -f $(DEPDIR)/LexVB.Tpo $(DEPDIR)/LexVB.Po
#	source='../src/LexVB.cxx' object='LexVB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexVB.o `test -f '../src/LexVB.cxx' || echo '$(srcdir)/'`../src/LexVB.cxx

LexVB.obj: ../src/LexVB.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexVB.obj -MD -MP -MF $(DEPDIR)/LexVB.Tpo -c -o LexVB.obj `if test -f '../src/LexVB.cxx'; then $(CYGPATH_W) '../src/LexVB.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexVB.cxx'; fi`
	mv -f $(DEPDIR)/LexVB.Tpo $(DEPDIR)/LexVB.Po
#	source='../src/LexVB.cxx' object='LexVB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexVB.obj `if test -f '../src/LexVB.cxx'; then $(CYGPATH_W) '../src/LexVB.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexVB.cxx'; fi`

LexTeX.o: ../src/LexTeX.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexTeX.o -MD -MP -MF $(DEPDIR)/LexTeX.Tpo -c -o LexTeX.o `test -f '../src/LexTeX.cxx' || echo '$(srcdir)/'`../src/LexTeX.cxx
	mv -f $(DEPDIR)/LexTeX.Tpo $(DEPDIR)/LexTeX.Po
#	source='../src/LexTeX.cxx' object='LexTeX.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexTeX.o `test -f '../src/LexTeX.cxx' || echo '$(srcdir)/'`../src/LexTeX.cxx

LexTeX.obj: ../src/LexTeX.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexTeX.obj -MD -MP -MF $(DEPDIR)/LexTeX.Tpo -c -o LexTeX.obj `if test -f '../src/LexTeX.cxx'; then $(CYGPATH_W) '../src/LexTeX.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexTeX.cxx'; fi`
	mv -f $(DEPDIR)/LexTeX.Tpo $(DEPDIR)/LexTeX.Po
#	source='../src/LexTeX.cxx' object='LexTeX.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexTeX.obj `if test -f '../src/LexTeX.cxx'; then $(CYGPATH_W) '../src/LexTeX.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexTeX.cxx'; fi`

LexTADS3.o: ../src/LexTADS3.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexTADS3.o -MD -MP -MF $(DEPDIR)/LexTADS3.Tpo -c -o LexTADS3.o `test -f '../src/LexTADS3.cxx' || echo '$(srcdir)/'`../src/LexTADS3.cxx
	mv -f $(DEPDIR)/LexTADS3.Tpo $(DEPDIR)/LexTADS3.Po
#	source='../src/LexTADS3.cxx' object='LexTADS3.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexTADS3.o `test -f '../src/LexTADS3.cxx' || echo '$(srcdir)/'`../src/LexTADS3.cxx

LexTADS3.obj: ../src/LexTADS3.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexTADS3.obj -MD -MP -MF $(DEPDIR)/LexTADS3.Tpo -c -o LexTADS3.obj `if test -f '../src/LexTADS3.cxx'; then $(CYGPATH_W) '../src/LexTADS3.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexTADS3.cxx'; fi`
	mv -f $(DEPDIR)/LexTADS3.Tpo $(DEPDIR)/LexTADS3.Po
#	source='../src/LexTADS3.cxx' object='LexTADS3.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexTADS3.obj `if test -f '../src/LexTADS3.cxx'; then $(CYGPATH_W) '../src/LexTADS3.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexTADS3.cxx'; fi`

LexSQL.o: ../src/LexSQL.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexSQL.o -MD -MP -MF $(DEPDIR)/LexSQL.Tpo -c -o LexSQL.o `test -f '../src/LexSQL.cxx' || echo '$(srcdir)/'`../src/LexSQL.cxx
	mv -f $(DEPDIR)/LexSQL.Tpo $(DEPDIR)/LexSQL.Po
#	source='../src/LexSQL.cxx' object='LexSQL.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexSQL.o `test -f '../src/LexSQL.cxx' || echo '$(srcdir)/'`../src/LexSQL.cxx

LexSQL.obj: ../src/LexSQL.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexSQL.obj -MD -MP -MF $(DEPDIR)/LexSQL.Tpo -c -o LexSQL.obj `if test -f '../src/LexSQL.cxx'; then $(CYGPATH_W) '../src/LexSQL.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexSQL.cxx'; fi`
	mv -f $(DEPDIR)/LexSQL.Tpo $(DEPDIR)/LexSQL.Po
#	source='../src/LexSQL.cxx' object='LexSQL.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexSQL.obj `if test -f '../src/LexSQL.cxx'; then $(CYGPATH_W) '../src/LexSQL.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexSQL.cxx'; fi`

LexSpecman.o: ../src/LexSpecman.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexSpecman.o -MD -MP -MF $(DEPDIR)/LexSpecman.Tpo -c -o LexSpecman.o `test -f '../src/LexSpecman.cxx' || echo '$(srcdir)/'`../src/LexSpecman.cxx
	mv -f $(DEPDIR)/LexSpecman.Tpo $(DEPDIR)/LexSpecman.Po
#	source='../src/LexSpecman.cxx' object='LexSpecman.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexSpecman.o `test -f '../src/LexSpecman.cxx' || echo '$(srcdir)/'`../src/LexSpecman.cxx

LexSpecman.obj: ../src/LexSpecman.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexSpecman.obj -MD -MP -MF $(DEPDIR)/LexSpecman.Tpo -c -o LexSpecman.obj `if test -f '../src/LexSpecman.cxx'; then $(CYGPATH_W) '../src/LexSpecman.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexSpecman.cxx'; fi`
	mv -f $(DEPDIR)/LexSpecman.Tpo $(DEPDIR)/LexSpecman.Po
#	source='../src/LexSpecman.cxx' object='LexSpecman.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexSpecman.obj `if test -f '../src/LexSpecman.cxx'; then $(CYGPATH_W) '../src/LexSpecman.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexSpecman.cxx'; fi`

LexSmalltalk.o: ../src/LexSmalltalk.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexSmalltalk.o -MD -MP -MF $(DEPDIR)/LexSmalltalk.Tpo -c -o LexSmalltalk.o `test -f '../src/LexSmalltalk.cxx' || echo '$(srcdir)/'`../src/LexSmalltalk.cxx
	mv -f $(DEPDIR)/LexSmalltalk.Tpo $(DEPDIR)/LexSmalltalk.Po
#	source='../src/LexSmalltalk.cxx' object='LexSmalltalk.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexSmalltalk.o `test -f '../src/LexSmalltalk.cxx' || echo '$(srcdir)/'`../src/LexSmalltalk.cxx

LexSmalltalk.obj: ../src/LexSmalltalk.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexSmalltalk.obj -MD -MP -MF $(DEPDIR)/LexSmalltalk.Tpo -c -o LexSmalltalk.obj `if test -f '../src/LexSmalltalk.cxx'; then $(CYGPATH_W) '../src/LexSmalltalk.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexSmalltalk.cxx'; fi`
	mv -f $(DEPDIR)/LexSmalltalk.Tpo $(DEPDIR)/LexSmalltalk.Po
#	source='../src/LexSmalltalk.cxx' object='LexSmalltalk.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexSmalltalk.obj `if test -f '../src/LexSmalltalk.cxx'; then $(CYGPATH_W) '../src/LexSmalltalk.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexSmalltalk.cxx'; fi`

LexScriptol.o: ../src/LexScriptol.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexScriptol.o -MD -MP -MF $(DEPDIR)/LexScriptol.Tpo -c -o LexScriptol.o `test -f '../src/LexScriptol.cxx' || echo '$(srcdir)/'`../src/LexScriptol.cxx
	mv -f $(DEPDIR)/LexScriptol.Tpo $(DEPDIR)/LexScriptol.Po
#	source='../src/LexScriptol.cxx' object='LexScriptol.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexScriptol.o `test -f '../src/LexScriptol.cxx' || echo '$(srcdir)/'`../src/LexScriptol.cxx

LexScriptol.obj: ../src/LexScriptol.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexScriptol.obj -MD -MP -MF $(DEPDIR)/LexScriptol.Tpo -c -o LexScriptol.obj `if test -f '../src/LexScriptol.cxx'; then $(CYGPATH_W) '../src/LexScriptol.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexScriptol.cxx'; fi`
	mv -f $(DEPDIR)/LexScriptol.Tpo $(DEPDIR)/LexScriptol.Po
#	source='../src/LexScriptol.cxx' object='LexScriptol.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexScriptol.obj `if test -f '../src/LexScriptol.cxx'; then $(CYGPATH_W) '../src/LexScriptol.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexScriptol.cxx'; fi`

LexRuby.o: ../src/LexRuby.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexRuby.o -MD -MP -MF $(DEPDIR)/LexRuby.Tpo -c -o LexRuby.o `test -f '../src/LexRuby.cxx' || echo '$(srcdir)/'`../src/LexRuby.cxx
	mv -f $(DEPDIR)/LexRuby.Tpo $(DEPDIR)/LexRuby.Po
#	source='../src/LexRuby.cxx' object='LexRuby.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexRuby.o `test -f '../src/LexRuby.cxx' || echo '$(srcdir)/'`../src/LexRuby.cxx

LexRuby.obj: ../src/LexRuby.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexRuby.obj -MD -MP -MF $(DEPDIR)/LexRuby.Tpo -c -o LexRuby.obj `if test -f '../src/LexRuby.cxx'; then $(CYGPATH_W) '../src/LexRuby.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexRuby.cxx'; fi`
	mv -f $(DEPDIR)/LexRuby.Tpo $(DEPDIR)/LexRuby.Po
#	source='../src/LexRuby.cxx' object='LexRuby.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexRuby.obj `if test -f '../src/LexRuby.cxx'; then $(CYGPATH_W) '../src/LexRuby.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexRuby.cxx'; fi`

LexRebol.o: ../src/LexRebol.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexRebol.o -MD -MP -MF $(DEPDIR)/LexRebol.Tpo -c -o LexRebol.o `test -f '../src/LexRebol.cxx' || echo '$(srcdir)/'`../src/LexRebol.cxx
	mv -f $(DEPDIR)/LexRebol.Tpo $(DEPDIR)/LexRebol.Po
#	source='../src/LexRebol.cxx' object='LexRebol.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexRebol.o `test -f '../src/LexRebol.cxx' || echo '$(srcdir)/'`../src/LexRebol.cxx

LexRebol.obj: ../src/LexRebol.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexRebol.obj -MD -MP -MF $(DEPDIR)/LexRebol.Tpo -c -o LexRebol.obj `if test -f '../src/LexRebol.cxx'; then $(CYGPATH_W) '../src/LexRebol.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexRebol.cxx'; fi`
	mv -f $(DEPDIR)/LexRebol.Tpo $(DEPDIR)/LexRebol.Po
#	source='../src/LexRebol.cxx' object='LexRebol.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexRebol.obj `if test -f '../src/LexRebol.cxx'; then $(CYGPATH_W) '../src/LexRebol.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexRebol.cxx'; fi`

LexPython.o: ../src/LexPython.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexPython.o -MD -MP -MF $(DEPDIR)/LexPython.Tpo -c -o LexPython.o `test -f '../src/LexPython.cxx' || echo '$(srcdir)/'`../src/LexPython.cxx
	mv -f $(DEPDIR)/LexPython.Tpo $(DEPDIR)/LexPython.Po
#	source='../src/LexPython.cxx' object='LexPython.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexPython.o `test -f '../src/LexPython.cxx' || echo '$(srcdir)/'`../src/LexPython.cxx

LexPython.obj: ../src/LexPython.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexPython.obj -MD -MP -MF $(DEPDIR)/LexPython.Tpo -c -o LexPython.obj `if test -f '../src/LexPython.cxx'; then $(CYGPATH_W) '../src/LexPython.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexPython.cxx'; fi`
	mv -f $(DEPDIR)/LexPython.Tpo $(DEPDIR)/LexPython.Po
#	source='../src/LexPython.cxx' object='LexPython.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexPython.obj `if test -f '../src/LexPython.cxx'; then $(CYGPATH_W) '../src/LexPython.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexPython.cxx'; fi`

LexPS.o: ../src/LexPS.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexPS.o -MD -MP -MF $(DEPDIR)/LexPS.Tpo -c -o LexPS.o `test -f '../src/LexPS.cxx' || echo '$(srcdir)/'`../src/LexPS.cxx
	mv -f $(DEPDIR)/LexPS.Tpo $(DEPDIR)/LexPS.Po
#	source='../src/LexPS.cxx' object='LexPS.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexPS.o `test -f '../src/LexPS.cxx' || echo '$(srcdir)/'`../src/LexPS.cxx

LexPS.obj: ../src/LexPS.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexPS.obj -MD -MP -MF $(DEPDIR)/LexPS.Tpo -c -o LexPS.obj `if test -f '../src/LexPS.cxx'; then $(CYGPATH_W) '../src/LexPS.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexPS.cxx'; fi`
	mv -f $(DEPDIR)/LexPS.Tpo $(DEPDIR)/LexPS.Po
#	source='../src/LexPS.cxx' object='LexPS.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexPS.obj `if test -f '../src/LexPS.cxx'; then $(CYGPATH_W) '../src/LexPS.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexPS.cxx'; fi`

LexPOV.o: ../src/LexPOV.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexPOV.o -MD -MP -MF $(DEPDIR)/LexPOV.Tpo -c -o LexPOV.o `test -f '../src/LexPOV.cxx' || echo '$(srcdir)/'`../src/LexPOV.cxx
	mv -f $(DEPDIR)/LexPOV.Tpo $(DEPDIR)/LexPOV.Po
#	source='../src/LexPOV.cxx' object='LexPOV.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexPOV.o `test -f '../src/LexPOV.cxx' || echo '$(srcdir)/'`../src/LexPOV.cxx

LexPOV.obj: ../src/LexPOV.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexPOV.obj -MD -MP -MF $(DEPDIR)/LexPOV.Tpo -c -o LexPOV.obj `if test -f '../src/LexPOV.cxx'; then $(CYGPATH_W) '../src/LexPOV.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexPOV.cxx'; fi`
	mv -f $(DEPDIR)/LexPOV.Tpo $(DEPDIR)/LexPOV.Po
#	source='../src/LexPOV.cxx' object='LexPOV.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexPOV.obj `if test -f '../src/LexPOV.cxx'; then $(CYGPATH_W) '../src/LexPOV.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexPOV.cxx'; fi`

LexPerl.o: ../src/LexPerl.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexPerl.o -MD -MP -MF $(DEPDIR)/LexPerl.Tpo -c -o LexPerl.o `test -f '../src/LexPerl.cxx' || echo '$(srcdir)/'`../src/LexPerl.cxx
	mv -f $(DEPDIR)/LexPerl.Tpo $(DEPDIR)/LexPerl.Po
#	source='../src/LexPerl.cxx' object='LexPerl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexPerl.o `test -f '../src/LexPerl.cxx' || echo '$(srcdir)/'`../src/LexPerl.cxx

LexPerl.obj: ../src/LexPerl.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexPerl.obj -MD -MP -MF $(DEPDIR)/LexPerl.Tpo -c -o LexPerl.obj `if test -f '../src/LexPerl.cxx'; then $(CYGPATH_W) '../src/LexPerl.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexPerl.cxx'; fi`
	mv -f $(DEPDIR)/LexPerl.Tpo $(DEPDIR)/LexPerl.Po
#	source='../src/LexPerl.cxx' object='LexPerl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexPerl.obj `if test -f '../src/LexPerl.cxx'; then $(CYGPATH_W) '../src/LexPerl.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexPerl.cxx'; fi`

LexPB.o: ../src/LexPB.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexPB.o -MD -MP -MF $(DEPDIR)/LexPB.Tpo -c -o LexPB.o `test -f '../src/LexPB.cxx' || echo '$(srcdir)/'`../src/LexPB.cxx
	mv -f $(DEPDIR)/LexPB.Tpo $(DEPDIR)/LexPB.Po
#	source='../src/LexPB.cxx' object='LexPB.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexPB.o `test -f '../src/LexPB.cxx' || echo '$(srcdir)/'`../src/LexPB.cxx

LexPB.obj: ../src/LexPB.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexPB.obj -MD -MP -MF $(DEPDIR)/LexPB.Tpo -c -o LexPB.obj `if test -f '../src/LexPB.cxx'; then $(CYGPATH_W) '../src/LexPB.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexPB.cxx'; fi`
	mv -f $(DEPDIR)/LexPB.Tpo $(DEPDIR)/LexPB.Po
#	source='../src/LexPB.cxx' object='LexPB.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexPB.obj `if test -f '../src/LexPB.cxx'; then $(CYGPATH_W) '../src/LexPB.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexPB.cxx'; fi`

LexPascal.o: ../src/LexPascal.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexPascal.o -MD -MP -MF $(DEPDIR)/LexPascal.Tpo -c -o LexPascal.o `test -f '../src/LexPascal.cxx' || echo '$(srcdir)/'`../src/LexPascal.cxx
	mv -f $(DEPDIR)/LexPascal.Tpo $(DEPDIR)/LexPascal.Po
#	source='../src/LexPascal.cxx' object='LexPascal.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexPascal.o `test -f '../src/LexPascal.cxx' || echo '$(srcdir)/'`../src/LexPascal.cxx

LexPascal.obj: ../src/LexPascal.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexPascal.obj -MD -MP -MF $(DEPDIR)/LexPascal.Tpo -c -o LexPascal.obj `if test -f '../src/LexPascal.cxx'; then $(CYGPATH_W) '../src/LexPascal.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexPascal.cxx'; fi`
	mv -f $(DEPDIR)/LexPascal.Tpo $(DEPDIR)/LexPascal.Po
#	source='../src/LexPascal.cxx' object='LexPascal.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexPascal.obj `if test -f '../src/LexPascal.cxx'; then $(CYGPATH_W) '../src/LexPascal.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexPascal.cxx'; fi`

LexOthers.o: ../src/LexOthers.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexOthers.o -MD -MP -MF $(DEPDIR)/LexOthers.Tpo -c -o LexOthers.o `test -f '../src/LexOthers.cxx' || echo '$(srcdir)/'`../src/LexOthers.cxx
	mv -f $(DEPDIR)/LexOthers.Tpo $(DEPDIR)/LexOthers.Po
#	source='../src/LexOthers.cxx' object='LexOthers.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexOthers.o `test -f '../src/LexOthers.cxx' || echo '$(srcdir)/'`../src/LexOthers.cxx

LexOthers.obj: ../src/LexOthers.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexOthers.obj -MD -MP -MF $(DEPDIR)/LexOthers.Tpo -c -o LexOthers.obj `if test -f '../src/LexOthers.cxx'; then $(CYGPATH_W) '../src/LexOthers.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexOthers.cxx'; fi`
	mv -f $(DEPDIR)/LexOthers.Tpo $(DEPDIR)/LexOthers.Po
#	source='../src/LexOthers.cxx' object='LexOthers.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexOthers.obj `if test -f '../src/LexOthers.cxx'; then $(CYGPATH_W) '../src/LexOthers.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexOthers.cxx'; fi`

LexNsis.o: ../src/LexNsis.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexNsis.o -MD -MP -MF $(DEPDIR)/LexNsis.Tpo -c -o LexNsis.o `test -f '../src/LexNsis.cxx' || echo '$(srcdir)/'`../src/LexNsis.cxx
	mv -f $(DEPDIR)/LexNsis.Tpo $(DEPDIR)/LexNsis.Po
#	source='../src/LexNsis.cxx' object='LexNsis.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexNsis.o `test -f '../src/LexNsis.cxx' || echo '$(srcdir)/'`../src/LexNsis.cxx

LexNsis.obj: ../src/LexNsis.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexNsis.obj -MD -MP -MF $(DEPDIR)/LexNsis.Tpo -c -o LexNsis.obj `if test -f '../src/LexNsis.cxx'; then $(CYGPATH_W) '../src/LexNsis.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexNsis.cxx'; fi`
	mv -f $(DEPDIR)/LexNsis.Tpo $(DEPDIR)/LexNsis.Po
#	source='../src/LexNsis.cxx' object='LexNsis.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexNsis.obj `if test -f '../src/LexNsis.cxx'; then $(CYGPATH_W) '../src/LexNsis.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexNsis.cxx'; fi`

LexMSSQL.o: ../src/LexMSSQL.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexMSSQL.o -MD -MP -MF $(DEPDIR)/LexMSSQL.Tpo -c -o LexMSSQL.o `test -f '../src/LexMSSQL.cxx' || echo '$(srcdir)/'`../src/LexMSSQL.cxx
	mv -f $(DEPDIR)/LexMSSQL.Tpo $(DEPDIR)/LexMSSQL.Po
#	source='../src/LexMSSQL.cxx' object='LexMSSQL.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexMSSQL.o `test -f '../src/LexMSSQL.cxx' || echo '$(srcdir)/'`../src/LexMSSQL.cxx

LexMSSQL.obj: ../src/LexMSSQL.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexMSSQL.obj -MD -MP -MF $(DEPDIR)/LexMSSQL.Tpo -c -o LexMSSQL.obj `if test -f '../src/LexMSSQL.cxx'; then $(CYGPATH_W) '../src/LexMSSQL.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexMSSQL.cxx'; fi`
	mv -f $(DEPDIR)/LexMSSQL.Tpo $(DEPDIR)/LexMSSQL.Po
#	source='../src/LexMSSQL.cxx' object='LexMSSQL.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexMSSQL.obj `if test -f '../src/LexMSSQL.cxx'; then $(CYGPATH_W) '../src/LexMSSQL.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexMSSQL.cxx'; fi`

LexMPT.o: ../src/LexMPT.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexMPT.o -MD -MP -MF $(DEPDIR)/LexMPT.Tpo -c -o LexMPT.o `test -f '../src/LexMPT.cxx' || echo '$(srcdir)/'`../src/LexMPT.cxx
	mv -f $(DEPDIR)/LexMPT.Tpo $(DEPDIR)/LexMPT.Po
#	source='../src/LexMPT.cxx' object='LexMPT.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexMPT.o `test -f '../src/LexMPT.cxx' || echo '$(srcdir)/'`../src/LexMPT.cxx

LexMPT.obj: ../src/LexMPT.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexMPT.obj -MD -MP -MF $(DEPDIR)/LexMPT.Tpo -c -o LexMPT.obj `if test -f '../src/LexMPT.cxx'; then $(CYGPATH_W) '../src/LexMPT.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexMPT.cxx'; fi`
	mv -f $(DEPDIR)/LexMPT.Tpo $(DEPDIR)/LexMPT.Po
#	source='../src/LexMPT.cxx' object='LexMPT.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexMPT.obj `if test -f '../src/LexMPT.cxx'; then $(CYGPATH_W) '../src/LexMPT.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexMPT.cxx'; fi`

LexMMIXAL.o: ../src/LexMMIXAL.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexMMIXAL.o -MD -MP -MF $(DEPDIR)/LexMMIXAL.Tpo -c -o LexMMIXAL.o `test -f '../src/LexMMIXAL.cxx' || echo '$(srcdir)/'`../src/LexMMIXAL.cxx
	mv -f $(DEPDIR)/LexMMIXAL.Tpo $(DEPDIR)/LexMMIXAL.Po
#	source='../src/LexMMIXAL.cxx' object='LexMMIXAL.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexMMIXAL.o `test -f '../src/LexMMIXAL.cxx' || echo '$(srcdir)/'`../src/LexMMIXAL.cxx

LexMMIXAL.obj: ../src/LexMMIXAL.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexMMIXAL.obj -MD -MP -MF $(DEPDIR)/LexMMIXAL.Tpo -c -o LexMMIXAL.obj `if test -f '../src/LexMMIXAL.cxx'; then $(CYGPATH_W) '../src/LexMMIXAL.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexMMIXAL.cxx'; fi`
	mv -f $(DEPDIR)/LexMMIXAL.Tpo $(DEPDIR)/LexMMIXAL.Po
#	source='../src/LexMMIXAL.cxx' object='LexMMIXAL.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexMMIXAL.obj `if test -f '../src/LexMMIXAL.cxx'; then $(CYGPATH_W) '../src/LexMMIXAL.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexMMIXAL.cxx'; fi`

LexMetapost.o: ../src/LexMetapost.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexMetapost.o -MD -MP -MF $(DEPDIR)/LexMetapost.Tpo -c -o LexMetapost.o `test -f '../src/LexMetapost.cxx' || echo '$(srcdir)/'`../src/LexMetapost.cxx
	mv -f $(DEPDIR)/LexMetapost.Tpo $(DEPDIR)/LexMetapost.Po
#	source='../src/LexMetapost.cxx' object='LexMetapost.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexMetapost.o `test -f '../src/LexMetapost.cxx' || echo '$(srcdir)/'`../src/LexMetapost.cxx

LexMetapost.obj: ../src/LexMetapost.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexMetapost.obj -MD -MP -MF $(DEPDIR)/LexMetapost.Tpo -c -o LexMetapost.obj `if test -f '../src/LexMetapost.cxx'; then $(CYGPATH_W) '../src/LexMetapost.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexMetapost.cxx'; fi`
	mv -f $(DEPDIR)/LexMetapost.Tpo $(DEPDIR)/LexMetapost.Po
#	source='../src/LexMetapost.cxx' object='LexMetapost.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexMetapost.obj `if test -f '../src/LexMetapost.cxx'; then $(CYGPATH_W) '../src/LexMetapost.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexMetapost.cxx'; fi`

LexMatlab.o: ../src/LexMatlab.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexMatlab.o -MD -MP -MF $(DEPDIR)/LexMatlab.Tpo -c -o LexMatlab.o `test -f '../src/LexMatlab.cxx' || echo '$(srcdir)/'`../src/LexMatlab.cxx
	mv -f $(DEPDIR)/LexMatlab.Tpo $(DEPDIR)/LexMatlab.Po
#	source='../src/LexMatlab.cxx' object='LexMatlab.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexMatlab.o `test -f '../src/LexMatlab.cxx' || echo '$(srcdir)/'`../src/LexMatlab.cxx

LexMatlab.obj: ../src/LexMatlab.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexMatlab.obj -MD -MP -MF $(DEPDIR)/LexMatlab.Tpo -c -o LexMatlab.obj `if test -f '../src/LexMatlab.cxx'; then $(CYGPATH_W) '../src/LexMatlab.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexMatlab.cxx'; fi`
	mv -f $(DEPDIR)/LexMatlab.Tpo $(DEPDIR)/LexMatlab.Po
#	source='../src/LexMatlab.cxx' object='LexMatlab.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexMatlab.obj `if test -f '../src/LexMatlab.cxx'; then $(CYGPATH_W) '../src/LexMatlab.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexMatlab.cxx'; fi`

LexLua.o: ../src/LexLua.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexLua.o -MD -MP -MF $(DEPDIR)/LexLua.Tpo -c -o LexLua.o `test -f '../src/LexLua.cxx' || echo '$(srcdir)/'`../src/LexLua.cxx
	mv -f $(DEPDIR)/LexLua.Tpo $(DEPDIR)/LexLua.Po
#	source='../src/LexLua.cxx' object='LexLua.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexLua.o `test -f '../src/LexLua.cxx' || echo '$(srcdir)/'`../src/LexLua.cxx

LexLua.obj: ../src/LexLua.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexLua.obj -MD -MP -MF $(DEPDIR)/LexLua.Tpo -c -o LexLua.obj `if test -f '../src/LexLua.cxx'; then $(CYGPATH_W) '../src/LexLua.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexLua.cxx'; fi`
	mv -f $(DEPDIR)/LexLua.Tpo $(DEPDIR)/LexLua.Po
#	source='../src/LexLua.cxx' object='LexLua.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexLua.obj `if test -f '../src/LexLua.cxx'; then $(CYGPATH_W) '../src/LexLua.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexLua.cxx'; fi`

LexLout.o: ../src/LexLout.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexLout.o -MD -MP -MF $(DEPDIR)/LexLout.Tpo -c -o LexLout.o `test -f '../src/LexLout.cxx' || echo '$(srcdir)/'`../src/LexLout.cxx
	mv -f $(DEPDIR)/LexLout.Tpo $(DEPDIR)/LexLout.Po
#	source='../src/LexLout.cxx' object='LexLout.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexLout.o `test -f '../src/LexLout.cxx' || echo '$(srcdir)/'`../src/LexLout.cxx

LexLout.obj: ../src/LexLout.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexLout.obj -MD -MP -MF $(DEPDIR)/LexLout.Tpo -c -o LexLout.obj `if test -f '../src/LexLout.cxx'; then $(CYGPATH_W) '../src/LexLout.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexLout.cxx'; fi`
	mv -f $(DEPDIR)/LexLout.Tpo $(DEPDIR)/LexLout.Po
#	source='../src/LexLout.cxx' object='LexLout.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexLout.obj `if test -f '../src/LexLout.cxx'; then $(CYGPATH_W) '../src/LexLout.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexLout.cxx'; fi`

LexLisp.o: ../src/LexLisp.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexLisp.o -MD -MP -MF $(DEPDIR)/LexLisp.Tpo -c -o LexLisp.o `test -f '../src/LexLisp.cxx' || echo '$(srcdir)/'`../src/LexLisp.cxx
	mv -f $(DEPDIR)/LexLisp.Tpo $(DEPDIR)/LexLisp.Po
#	source='../src/LexLisp.cxx' object='LexLisp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexLisp.o `test -f '../src/LexLisp.cxx' || echo '$(srcdir)/'`../src/LexLisp.cxx

LexLisp.obj: ../src/LexLisp.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexLisp.obj -MD -MP -MF $(DEPDIR)/LexLisp.Tpo -c -o LexLisp.obj `if test -f '../src/LexLisp.cxx'; then $(CYGPATH_W) '../src/LexLisp.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexLisp.cxx'; fi`
	mv -f $(DEPDIR)/LexLisp.Tpo $(DEPDIR)/LexLisp.Po
#	source='../src/LexLisp.cxx' object='LexLisp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexLisp.obj `if test -f '../src/LexLisp.cxx'; then $(CYGPATH_W) '../src/LexLisp.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexLisp.cxx'; fi`

LexKix.o: ../src/LexKix.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexKix.o -MD -MP -MF $(DEPDIR)/LexKix.Tpo -c -o LexKix.o `test -f '../src/LexKix.cxx' || echo '$(srcdir)/'`../src/LexKix.cxx
	mv -f $(DEPDIR)/LexKix.Tpo $(DEPDIR)/LexKix.Po
#	source='../src/LexKix.cxx' object='LexKix.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexKix.o `test -f '../src/LexKix.cxx' || echo '$(srcdir)/'`../src/LexKix.cxx

LexKix.obj: ../src/LexKix.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexKix.obj -MD -MP -MF $(DEPDIR)/LexKix.Tpo -c -o LexKix.obj `if test -f '../src/LexKix.cxx'; then $(CYGPATH_W) '../src/LexKix.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexKix.cxx'; fi`
	mv -f $(DEPDIR)/LexKix.Tpo $(DEPDIR)/LexKix.Po
#	source='../src/LexKix.cxx' object='LexKix.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexKix.obj `if test -f '../src/LexKix.cxx'; then $(CYGPATH_W) '../src/LexKix.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexKix.cxx'; fi`

LexHTML.o: ../src/LexHTML.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexHTML.o -MD -MP -MF $(DEPDIR)/LexHTML.Tpo -c -o LexHTML.o `test -f '../src/LexHTML.cxx' || echo '$(srcdir)/'`../src/LexHTML.cxx
	mv -f $(DEPDIR)/LexHTML.Tpo $(DEPDIR)/LexHTML.Po
#	source='../src/LexHTML.cxx' object='LexHTML.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexHTML.o `test -f '../src/LexHTML.cxx' || echo '$(srcdir)/'`../src/LexHTML.cxx

LexHTML.obj: ../src/LexHTML.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexHTML.obj -MD -MP -MF $(DEPDIR)/LexHTML.Tpo -c -o LexHTML.obj `if test -f '../src/LexHTML.cxx'; then $(CYGPATH_W) '../src/LexHTML.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexHTML.cxx'; fi`
	mv -f $(DEPDIR)/LexHTML.Tpo $(DEPDIR)/LexHTML.Po
#	source='../src/LexHTML.cxx' object='LexHTML.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexHTML.obj `if test -f '../src/LexHTML.cxx'; then $(CYGPATH_W) '../src/LexHTML.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexHTML.cxx'; fi`

LexHaskell.o: ../src/LexHaskell.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexHaskell.o -MD -MP -MF $(DEPDIR)/LexHaskell.Tpo -c -o LexHaskell.o `test -f '../src/LexHaskell.cxx' || echo '$(srcdir)/'`../src/LexHaskell.cxx
	mv -f $(DEPDIR)/LexHaskell.Tpo $(DEPDIR)/LexHaskell.Po
#	source='../src/LexHaskell.cxx' object='LexHaskell.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexHaskell.o `test -f '../src/LexHaskell.cxx' || echo '$(srcdir)/'`../src/LexHaskell.cxx

LexHaskell.obj: ../src/LexHaskell.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexHaskell.obj -MD -MP -MF $(DEPDIR)/LexHaskell.Tpo -c -o LexHaskell.obj `if test -f '../src/LexHaskell.cxx'; then $(CYGPATH_W) '../src/LexHaskell.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexHaskell.cxx'; fi`
	mv -f $(DEPDIR)/LexHaskell.Tpo $(DEPDIR)/LexHaskell.Po
#	source='../src/LexHaskell.cxx' object='LexHaskell.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexHaskell.obj `if test -f '../src/LexHaskell.cxx'; then $(CYGPATH_W) '../src/LexHaskell.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexHaskell.cxx'; fi`

LexGui4Cli.o: ../src/LexGui4Cli.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexGui4Cli.o -MD -MP -MF $(DEPDIR)/LexGui4Cli.Tpo -c -o LexGui4Cli.o `test -f '../src/LexGui4Cli.cxx' || echo '$(srcdir)/'`../src/LexGui4Cli.cxx
	mv -f $(DEPDIR)/LexGui4Cli.Tpo $(DEPDIR)/LexGui4Cli.Po
#	source='../src/LexGui4Cli.cxx' object='LexGui4Cli.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexGui4Cli.o `test -f '../src/LexGui4Cli.cxx' || echo '$(srcdir)/'`../src/LexGui4Cli.cxx

LexGui4Cli.obj: ../src/LexGui4Cli.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexGui4Cli.obj -MD -MP -MF $(DEPDIR)/LexGui4Cli.Tpo -c -o LexGui4Cli.obj `if test -f '../src/LexGui4Cli.cxx'; then $(CYGPATH_W) '../src/LexGui4Cli.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexGui4Cli.cxx'; fi`
	mv -f $(DEPDIR)/LexGui4Cli.Tpo $(DEPDIR)/LexGui4Cli.Po
#	source='../src/LexGui4Cli.cxx' object='LexGui4Cli.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexGui4Cli.obj `if test -f '../src/LexGui4Cli.cxx'; then $(CYGPATH_W) '../src/LexGui4Cli.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexGui4Cli.cxx'; fi`

LexFortran.o: ../src/LexFortran.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexFortran.o -MD -MP -MF $(DEPDIR)/LexFortran.Tpo -c -o LexFortran.o `test -f '../src/LexFortran.cxx' || echo '$(srcdir)/'`../src/LexFortran.cxx
	mv -f $(DEPDIR)/LexFortran.Tpo $(DEPDIR)/LexFortran.Po
#	source='../src/LexFortran.cxx' object='LexFortran.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexFortran.o `test -f '../src/LexFortran.cxx' || echo '$(srcdir)/'`../src/LexFortran.cxx

LexFortran.obj: ../src/LexFortran.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexFortran.obj -MD -MP -MF $(DEPDIR)/LexFortran.Tpo -c -o LexFortran.obj `if test -f '../src/LexFortran.cxx'; then $(CYGPATH_W) '../src/LexFortran.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexFortran.cxx'; fi`
	mv -f $(DEPDIR)/LexFortran.Tpo $(DEPDIR)/LexFortran.Po
#	source='../src/LexFortran.cxx' object='LexFortran.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexFortran.obj `if test -f '../src/LexFortran.cxx'; then $(CYGPATH_W) '../src/LexFortran.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexFortran.cxx'; fi`

LexForth.o: ../src/LexForth.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexForth.o -MD -MP -MF $(DEPDIR)/LexForth.Tpo -c -o LexForth.o `test -f '../src/LexForth.cxx' || echo '$(srcdir)/'`../src/LexForth.cxx
	mv -f $(DEPDIR)/LexForth.Tpo $(DEPDIR)/LexForth.Po
#	source='../src/LexForth.cxx' object='LexForth.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexForth.o `test -f '../src/LexForth.cxx' || echo '$(srcdir)/'`../src/LexForth.cxx

LexForth.obj: ../src/LexForth.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexForth.obj -MD -MP -MF $(DEPDIR)/LexForth.Tpo -c -o LexForth.obj `if test -f '../src/LexForth.cxx'; then $(CYGPATH_W) '../src/LexForth.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexForth.cxx'; fi`
	mv -f $(DEPDIR)/LexForth.Tpo $(DEPDIR)/LexForth.Po
#	source='../src/LexForth.cxx' object='LexForth.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexForth.obj `if test -f '../src/LexForth.cxx'; then $(CYGPATH_W) '../src/LexForth.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexForth.cxx'; fi`

LexFlagship.o: ../src/LexFlagship.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexFlagship.o -MD -MP -MF $(DEPDIR)/LexFlagship.Tpo -c -o LexFlagship.o `test -f '../src/LexFlagship.cxx' || echo '$(srcdir)/'`../src/LexFlagship.cxx
	mv -f $(DEPDIR)/LexFlagship.Tpo $(DEPDIR)/LexFlagship.Po
#	source='../src/LexFlagship.cxx' object='LexFlagship.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexFlagship.o `test -f '../src/LexFlagship.cxx' || echo '$(srcdir)/'`../src/LexFlagship.cxx

LexFlagship.obj: ../src/LexFlagship.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexFlagship.obj -MD -MP -MF $(DEPDIR)/LexFlagship.Tpo -c -o LexFlagship.obj `if test -f '../src/LexFlagship.cxx'; then $(CYGPATH_W) '../src/LexFlagship.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexFlagship.cxx'; fi`
	mv -f $(DEPDIR)/LexFlagship.Tpo $(DEPDIR)/LexFlagship.Po
#	source='../src/LexFlagship.cxx' object='LexFlagship.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexFlagship.obj `if test -f '../src/LexFlagship.cxx'; then $(CYGPATH_W) '../src/LexFlagship.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexFlagship.cxx'; fi`

LexEScript.o: ../src/LexEScript.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexEScript.o -MD -MP -MF $(DEPDIR)/LexEScript.Tpo -c -o LexEScript.o `test -f '../src/LexEScript.cxx' || echo '$(srcdir)/'`../src/LexEScript.cxx
	mv -f $(DEPDIR)/LexEScript.Tpo $(DEPDIR)/LexEScript.Po
#	source='../src/LexEScript.cxx' object='LexEScript.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexEScript.o `test -f '../src/LexEScript.cxx' || echo '$(srcdir)/'`../src/LexEScript.cxx

LexEScript.obj: ../src/LexEScript.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexEScript.obj -MD -MP -MF $(DEPDIR)/LexEScript.Tpo -c -o LexEScript.obj `if test -f '../src/LexEScript.cxx'; then $(CYGPATH_W) '../src/LexEScript.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexEScript.cxx'; fi`
	mv -f $(DEPDIR)/LexEScript.Tpo $(DEPDIR)/LexEScript.Po
#	source='../src/LexEScript.cxx' object='LexEScript.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexEScript.obj `if test -f '../src/LexEScript.cxx'; then $(CYGPATH_W) '../src/LexEScript.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexEScript.cxx'; fi`

LexErlang.o: ../src/LexErlang.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexErlang.o -MD -MP -MF $(DEPDIR)/LexErlang.Tpo -c -o LexErlang.o `test -f '../src/LexErlang.cxx' || echo '$(srcdir)/'`../src/LexErlang.cxx
	mv -f $(DEPDIR)/LexErlang.Tpo $(DEPDIR)/LexErlang.Po
#	source='../src/LexErlang.cxx' object='LexErlang.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexErlang.o `test -f '../src/LexErlang.cxx' || echo '$(srcdir)/'`../src/LexErlang.cxx

LexErlang.obj: ../src/LexErlang.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexErlang.obj -MD -MP -MF $(DEPDIR)/LexErlang.Tpo -c -o LexErlang.obj `if test -f '../src/LexErlang.cxx'; then $(CYGPATH_W) '../src/LexErlang.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexErlang.cxx'; fi`
	mv -f $(DEPDIR)/LexErlang.Tpo $(DEPDIR)/LexErlang.Po
#	source='../src/LexErlang.cxx' object='LexErlang.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexErlang.obj `if test -f '../src/LexErlang.cxx'; then $(CYGPATH_W) '../src/LexErlang.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexErlang.cxx'; fi`

LexEiffel.o: ../src/LexEiffel.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexEiffel.o -MD -MP -MF $(DEPDIR)/LexEiffel.Tpo -c -o LexEiffel.o `test -f '../src/LexEiffel.cxx' || echo '$(srcdir)/'`../src/LexEiffel.cxx
	mv -f $(DEPDIR)/LexEiffel.Tpo $(DEPDIR)/LexEiffel.Po
#	source='../src/LexEiffel.cxx' object='LexEiffel.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexEiffel.o `test -f '../src/LexEiffel.cxx' || echo '$(srcdir)/'`../src/LexEiffel.cxx

LexEiffel.obj: ../src/LexEiffel.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexEiffel.obj -MD -MP -MF $(DEPDIR)/LexEiffel.Tpo -c -o LexEiffel.obj `if test -f '../src/LexEiffel.cxx'; then $(CYGPATH_W) '../src/LexEiffel.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexEiffel.cxx'; fi`
	mv -f $(DEPDIR)/LexEiffel.Tpo $(DEPDIR)/LexEiffel.Po
#	source='../src/LexEiffel.cxx' object='LexEiffel.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexEiffel.obj `if test -f '../src/LexEiffel.cxx'; then $(CYGPATH_W) '../src/LexEiffel.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexEiffel.cxx'; fi`

LexCSS.o: ../src/LexCSS.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexCSS.o -MD -MP -MF $(DEPDIR)/LexCSS.Tpo -c -o LexCSS.o `test -f '../src/LexCSS.cxx' || echo '$(srcdir)/'`../src/LexCSS.cxx
	mv -f $(DEPDIR)/LexCSS.Tpo $(DEPDIR)/LexCSS.Po
#	source='../src/LexCSS.cxx' object='LexCSS.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexCSS.o `test -f '../src/LexCSS.cxx' || echo '$(srcdir)/'`../src/LexCSS.cxx

LexCSS.obj: ../src/LexCSS.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexCSS.obj -MD -MP -MF $(DEPDIR)/LexCSS.Tpo -c -o LexCSS.obj `if test -f '../src/LexCSS.cxx'; then $(CYGPATH_W) '../src/LexCSS.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexCSS.cxx'; fi`
	mv -f $(DEPDIR)/LexCSS.Tpo $(DEPDIR)/LexCSS.Po
#	source='../src/LexCSS.cxx' object='LexCSS.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexCSS.obj `if test -f '../src/LexCSS.cxx'; then $(CYGPATH_W) '../src/LexCSS.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexCSS.cxx'; fi`

LexCsound.o: ../src/LexCsound.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexCsound.o -MD -MP -MF $(DEPDIR)/LexCsound.Tpo -c -o LexCsound.o `test -f '../src/LexCsound.cxx' || echo '$(srcdir)/'`../src/LexCsound.cxx
	mv -f $(DEPDIR)/LexCsound.Tpo $(DEPDIR)/LexCsound.Po
#	source='../src/LexCsound.cxx' object='LexCsound.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexCsound.o `test -f '../src/LexCsound.cxx' || echo '$(srcdir)/'`../src/LexCsound.cxx

LexCsound.obj: ../src/LexCsound.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexCsound.obj -MD -MP -MF $(DEPDIR)/LexCsound.Tpo -c -o LexCsound.obj `if test -f '../src/LexCsound.cxx'; then $(CYGPATH_W) '../src/LexCsound.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexCsound.cxx'; fi`
	mv -f $(DEPDIR)/LexCsound.Tpo $(DEPDIR)/LexCsound.Po
#	source='../src/LexCsound.cxx' object='LexCsound.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexCsound.obj `if test -f '../src/LexCsound.cxx'; then $(CYGPATH_W) '../src/LexCsound.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexCsound.cxx'; fi`

LexCrontab.o: ../src/LexCrontab.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexCrontab.o -MD -MP -MF $(DEPDIR)/LexCrontab.Tpo -c -o LexCrontab.o `test -f '../src/LexCrontab.cxx' || echo '$(srcdir)/'`../src/LexCrontab.cxx
	mv -f $(DEPDIR)/LexCrontab.Tpo $(DEPDIR)/LexCrontab.Po
#	source='../src/LexCrontab.cxx' object='LexCrontab.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexCrontab.o `test -f '../src/LexCrontab.cxx' || echo '$(srcdir)/'`../src/LexCrontab.cxx

LexCrontab.obj: ../src/LexCrontab.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexCrontab.obj -MD -MP -MF $(DEPDIR)/LexCrontab.Tpo -c -o LexCrontab.obj `if test -f '../src/LexCrontab.cxx'; then $(CYGPATH_W) '../src/LexCrontab.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexCrontab.cxx'; fi`
	mv -f $(DEPDIR)/LexCrontab.Tpo $(DEPDIR)/LexCrontab.Po
#	source='../src/LexCrontab.cxx' object='LexCrontab.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexCrontab.obj `if test -f '../src/LexCrontab.cxx'; then $(CYGPATH_W) '../src/LexCrontab.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexCrontab.cxx'; fi`

LexCPP.o: ../src/LexCPP.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexCPP.o -MD -MP -MF $(DEPDIR)/LexCPP.Tpo -c -o LexCPP.o `test -f '../src/LexCPP.cxx' || echo '$(srcdir)/'`../src/LexCPP.cxx
	mv -f $(DEPDIR)/LexCPP.Tpo $(DEPDIR)/LexCPP.Po
#	source='../src/LexCPP.cxx' object='LexCPP.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexCPP.o `test -f '../src/LexCPP.cxx' || echo '$(srcdir)/'`../src/LexCPP.cxx

LexCPP.obj: ../src/LexCPP.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexCPP.obj -MD -MP -MF $(DEPDIR)/LexCPP.Tpo -c -o LexCPP.obj `if test -f '../src/LexCPP.cxx'; then $(CYGPATH_W) '../src/LexCPP.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexCPP.cxx'; fi`
	mv -f $(DEPDIR)/LexCPP.Tpo $(DEPDIR)/LexCPP.Po
#	source='../src/LexCPP.cxx' object='LexCPP.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexCPP.obj `if test -f '../src/LexCPP.cxx'; then $(CYGPATH_W) '../src/LexCPP.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexCPP.cxx'; fi`

LexConf.o: ../src/LexConf.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexConf.o -MD -MP -MF $(DEPDIR)/LexConf.Tpo -c -o LexConf.o `test -f '../src/LexConf.cxx' || echo '$(srcdir)/'`../src/LexConf.cxx
	mv -f $(DEPDIR)/LexConf.Tpo $(DEPDIR)/LexConf.Po
#	source='../src/LexConf.cxx' object='LexConf.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexConf.o `test -f '../src/LexConf.cxx' || echo '$(srcdir)/'`../src/LexConf.cxx

LexConf.obj: ../src/LexConf.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexConf.obj -MD -MP -MF $(DEPDIR)/LexConf.Tpo -c -o LexConf.obj `if test -f '../src/LexConf.cxx'; then $(CYGPATH_W) '../src/LexConf.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexConf.cxx'; fi`
	mv -f $(DEPDIR)/LexConf.Tpo $(DEPDIR)/LexConf.Po
#	source='../src/LexConf.cxx' object='LexConf.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexConf.obj `if test -f '../src/LexConf.cxx'; then $(CYGPATH_W) '../src/LexConf.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexConf.cxx'; fi`

LexCLW.o: ../src/LexCLW.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexCLW.o -MD -MP -MF $(DEPDIR)/LexCLW.Tpo -c -o LexCLW.o `test -f '../src/LexCLW.cxx' || echo '$(srcdir)/'`../src/LexCLW.cxx
	mv -f $(DEPDIR)/LexCLW.Tpo $(DEPDIR)/LexCLW.Po
#	source='../src/LexCLW.cxx' object='LexCLW.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexCLW.o `test -f '../src/LexCLW.cxx' || echo '$(srcdir)/'`../src/LexCLW.cxx

LexCLW.obj: ../src/LexCLW.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexCLW.obj -MD -MP -MF $(DEPDIR)/LexCLW.Tpo -c -o LexCLW.obj `if test -f '../src/LexCLW.cxx'; then $(CYGPATH_W) '../src/LexCLW.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexCLW.cxx'; fi`
	mv -f $(DEPDIR)/LexCLW.Tpo $(DEPDIR)/LexCLW.Po
#	source='../src/LexCLW.cxx' object='LexCLW.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexCLW.obj `if test -f '../src/LexCLW.cxx'; then $(CYGPATH_W) '../src/LexCLW.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexCLW.cxx'; fi`

LexCaml.o: ../src/LexCaml.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexCaml.o -MD -MP -MF $(DEPDIR)/LexCaml.Tpo -c -o LexCaml.o `test -f '../src/LexCaml.cxx' || echo '$(srcdir)/'`../src/LexCaml.cxx
	mv -f $(DEPDIR)/LexCaml.Tpo $(DEPDIR)/LexCaml.Po
#	source='../src/LexCaml.cxx' object='LexCaml.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexCaml.o `test -f '../src/LexCaml.cxx' || echo '$(srcdir)/'`../src/LexCaml.cxx

LexCaml.obj: ../src/LexCaml.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexCaml.obj -MD -MP -MF $(DEPDIR)/LexCaml.Tpo -c -o LexCaml.obj `if test -f '../src/LexCaml.cxx'; then $(CYGPATH_W) '../src/LexCaml.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexCaml.cxx'; fi`
	mv -f $(DEPDIR)/LexCaml.Tpo $(DEPDIR)/LexCaml.Po
#	source='../src/LexCaml.cxx' object='LexCaml.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexCaml.obj `if test -f '../src/LexCaml.cxx'; then $(CYGPATH_W) '../src/LexCaml.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexCaml.cxx'; fi`

LexBullant.o: ../src/LexBullant.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexBullant.o -MD -MP -MF $(DEPDIR)/LexBullant.Tpo -c -o LexBullant.o `test -f '../src/LexBullant.cxx' || echo '$(srcdir)/'`../src/LexBullant.cxx
	mv -f $(DEPDIR)/LexBullant.Tpo $(DEPDIR)/LexBullant.Po
#	source='../src/LexBullant.cxx' object='LexBullant.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexBullant.o `test -f '../src/LexBullant.cxx' || echo '$(srcdir)/'`../src/LexBullant.cxx

LexBullant.obj: ../src/LexBullant.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexBullant.obj -MD -MP -MF $(DEPDIR)/LexBullant.Tpo -c -o LexBullant.obj `if test -f '../src/LexBullant.cxx'; then $(CYGPATH_W) '../src/LexBullant.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexBullant.cxx'; fi`
	mv -f $(DEPDIR)/LexBullant.Tpo $(DEPDIR)/LexBullant.Po
#	source='../src/LexBullant.cxx' object='LexBullant.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexBullant.obj `if test -f '../src/LexBullant.cxx'; then $(CYGPATH_W) '../src/LexBullant.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexBullant.cxx'; fi`

LexBasic.o: ../src/LexBasic.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexBasic.o -MD -MP -MF $(DEPDIR)/LexBasic.Tpo -c -o LexBasic.o `test -f '../src/LexBasic.cxx' || echo '$(srcdir)/'`../src/LexBasic.cxx
	mv -f $(DEPDIR)/LexBasic.Tpo $(DEPDIR)/LexBasic.Po
#	source='../src/LexBasic.cxx' object='LexBasic.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexBasic.o `test -f '../src/LexBasic.cxx' || echo '$(srcdir)/'`../src/LexBasic.cxx

LexBasic.obj: ../src/LexBasic.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexBasic.obj -MD -MP -MF $(DEPDIR)/LexBasic.Tpo -c -o LexBasic.obj `if test -f '../src/LexBasic.cxx'; then $(CYGPATH_W) '../src/LexBasic.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexBasic.cxx'; fi`
	mv -f $(DEPDIR)/LexBasic.Tpo $(DEPDIR)/LexBasic.Po
#	source='../src/LexBasic.cxx' object='LexBasic.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexBasic.obj `if test -f '../src/LexBasic.cxx'; then $(CYGPATH_W) '../src/LexBasic.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexBasic.cxx'; fi`

LexBash.o: ../src/LexBash.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexBash.o -MD -MP -MF $(DEPDIR)/LexBash.Tpo -c -o LexBash.o `test -f '../src/LexBash.cxx' || echo '$(srcdir)/'`../src/LexBash.cxx
	mv -f $(DEPDIR)/LexBash.Tpo $(DEPDIR)/LexBash.Po
#	source='../src/LexBash.cxx' object='LexBash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexBash.o `test -f '../src/LexBash.cxx' || echo '$(srcdir)/'`../src/LexBash.cxx

LexBash.obj: ../src/LexBash.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexBash.obj -MD -MP -MF $(DEPDIR)/LexBash.Tpo -c -o LexBash.obj `if test -f '../src/LexBash.cxx'; then $(CYGPATH_W) '../src/LexBash.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexBash.cxx'; fi`
	mv -f $(DEPDIR)/LexBash.Tpo $(DEPDIR)/LexBash.Po
#	source='../src/LexBash.cxx' object='LexBash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexBash.obj `if test -f '../src/LexBash.cxx'; then $(CYGPATH_W) '../src/LexBash.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexBash.cxx'; fi`

LexBaan.o: ../src/LexBaan.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexBaan.o -MD -MP -MF $(DEPDIR)/LexBaan.Tpo -c -o LexBaan.o `test -f '../src/LexBaan.cxx' || echo '$(srcdir)/'`../src/LexBaan.cxx
	mv -f $(DEPDIR)/LexBaan.Tpo $(DEPDIR)/LexBaan.Po
#	source='../src/LexBaan.cxx' object='LexBaan.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexBaan.o `test -f '../src/LexBaan.cxx' || echo '$(srcdir)/'`../src/LexBaan.cxx

LexBaan.obj: ../src/LexBaan.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexBaan.obj -MD -MP -MF $(DEPDIR)/LexBaan.Tpo -c -o LexBaan.obj `if test -f '../src/LexBaan.cxx'; then $(CYGPATH_W) '../src/LexBaan.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexBaan.cxx'; fi`
	mv -f $(DEPDIR)/LexBaan.Tpo $(DEPDIR)/LexBaan.Po
#	source='../src/LexBaan.cxx' object='LexBaan.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexBaan.obj `if test -f '../src/LexBaan.cxx'; then $(CYGPATH_W) '../src/LexBaan.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexBaan.cxx'; fi`

LexAVE.o: ../src/LexAVE.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexAVE.o -MD -MP -MF $(DEPDIR)/LexAVE.Tpo -c -o LexAVE.o `test -f '../src/LexAVE.cxx' || echo '$(srcdir)/'`../src/LexAVE.cxx
	mv -f $(DEPDIR)/LexAVE.Tpo $(DEPDIR)/LexAVE.Po
#	source='../src/LexAVE.cxx' object='LexAVE.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexAVE.o `test -f '../src/LexAVE.cxx' || echo '$(srcdir)/'`../src/LexAVE.cxx

LexAVE.obj: ../src/LexAVE.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexAVE.obj -MD -MP -MF $(DEPDIR)/LexAVE.Tpo -c -o LexAVE.obj `if test -f '../src/LexAVE.cxx'; then $(CYGPATH_W) '../src/LexAVE.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexAVE.cxx'; fi`
	mv -f $(DEPDIR)/LexAVE.Tpo $(DEPDIR)/LexAVE.Po
#	source='../src/LexAVE.cxx' object='LexAVE.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexAVE.obj `if test -f '../src/LexAVE.cxx'; then $(CYGPATH_W) '../src/LexAVE.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexAVE.cxx'; fi`

LexAU3.o: ../src/LexAU3.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexAU3.o -MD -MP -MF $(DEPDIR)/LexAU3.Tpo -c -o LexAU3.o `test -f '../src/LexAU3.cxx' || echo '$(srcdir)/'`../src/LexAU3.cxx
	mv -f $(DEPDIR)/LexAU3.Tpo $(DEPDIR)/LexAU3.Po
#	source='../src/LexAU3.cxx' object='LexAU3.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexAU3.o `test -f '../src/LexAU3.cxx' || echo '$(srcdir)/'`../src/LexAU3.cxx

LexAU3.obj: ../src/LexAU3.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexAU3.obj -MD -MP -MF $(DEPDIR)/LexAU3.Tpo -c -o LexAU3.obj `if test -f '../src/LexAU3.cxx'; then $(CYGPATH_W) '../src/LexAU3.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexAU3.cxx'; fi`
	mv -f $(DEPDIR)/LexAU3.Tpo $(DEPDIR)/LexAU3.Po
#	source='../src/LexAU3.cxx' object='LexAU3.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexAU3.obj `if test -f '../src/LexAU3.cxx'; then $(CYGPATH_W) '../src/LexAU3.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexAU3.cxx'; fi`

LexAsn1.o: ../src/LexAsn1.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexAsn1.o -MD -MP -MF $(DEPDIR)/LexAsn1.Tpo -c -o LexAsn1.o `test -f '../src/LexAsn1.cxx' || echo '$(srcdir)/'`../src/LexAsn1.cxx
	mv -f $(DEPDIR)/LexAsn1.Tpo $(DEPDIR)/LexAsn1.Po
#	source='../src/LexAsn1.cxx' object='LexAsn1.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexAsn1.o `test -f '../src/LexAsn1.cxx' || echo '$(srcdir)/'`../src/LexAsn1.cxx

LexAsn1.obj: ../src/LexAsn1.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexAsn1.obj -MD -MP -MF $(DEPDIR)/LexAsn1.Tpo -c -o LexAsn1.obj `if test -f '../src/LexAsn1.cxx'; then $(CYGPATH_W) '../src/LexAsn1.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexAsn1.cxx'; fi`
	mv -f $(DEPDIR)/LexAsn1.Tpo $(DEPDIR)/LexAsn1.Po
#	source='../src/LexAsn1.cxx' object='LexAsn1.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexAsn1.obj `if test -f '../src/LexAsn1.cxx'; then $(CYGPATH_W) '../src/LexAsn1.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexAsn1.cxx'; fi`

LexAsm.o: ../src/LexAsm.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexAsm.o -MD -MP -MF $(DEPDIR)/LexAsm.Tpo -c -o LexAsm.o `test -f '../src/LexAsm.cxx' || echo '$(srcdir)/'`../src/LexAsm.cxx
	mv -f $(DEPDIR)/LexAsm.Tpo $(DEPDIR)/LexAsm.Po
#	source='../src/LexAsm.cxx' object='LexAsm.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexAsm.o `test -f '../src/LexAsm.cxx' || echo '$(srcdir)/'`../src/LexAsm.cxx

LexAsm.obj: ../src/LexAsm.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexAsm.obj -MD -MP -MF $(DEPDIR)/LexAsm.Tpo -c -o LexAsm.obj `if test -f '../src/LexAsm.cxx'; then $(CYGPATH_W) '../src/LexAsm.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexAsm.cxx'; fi`
	mv -f $(DEPDIR)/LexAsm.Tpo $(DEPDIR)/LexAsm.Po
#	source='../src/LexAsm.cxx' object='LexAsm.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexAsm.obj `if test -f '../src/LexAsm.cxx'; then $(CYGPATH_W) '../src/LexAsm.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexAsm.cxx'; fi`

LexAPDL.o: ../src/LexAPDL.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexAPDL.o -MD -MP -MF $(DEPDIR)/LexAPDL.Tpo -c -o LexAPDL.o `test -f '../src/LexAPDL.cxx' || echo '$(srcdir)/'`../src/LexAPDL.cxx
	mv -f $(DEPDIR)/LexAPDL.Tpo $(DEPDIR)/LexAPDL.Po
#	source='../src/LexAPDL.cxx' object='LexAPDL.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexAPDL.o `test -f '../src/LexAPDL.cxx' || echo '$(srcdir)/'`../src/LexAPDL.cxx

LexAPDL.obj: ../src/LexAPDL.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexAPDL.obj -MD -MP -MF $(DEPDIR)/LexAPDL.Tpo -c -o LexAPDL.obj `if test -f '../src/LexAPDL.cxx'; then $(CYGPATH_W) '../src/LexAPDL.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexAPDL.cxx'; fi`
	mv -f $(DEPDIR)/LexAPDL.Tpo $(DEPDIR)/LexAPDL.Po
#	source='../src/LexAPDL.cxx' object='LexAPDL.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexAPDL.obj `if test -f '../src/LexAPDL.cxx'; then $(CYGPATH_W) '../src/LexAPDL.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexAPDL.cxx'; fi`

LexAda.o: ../src/LexAda.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexAda.o -MD -MP -MF $(DEPDIR)/LexAda.Tpo -c -o LexAda.o `test -f '../src/LexAda.cxx' || echo '$(srcdir)/'`../src/LexAda.cxx
	mv -f $(DEPDIR)/LexAda.Tpo $(DEPDIR)/LexAda.Po
#	source='../src/LexAda.cxx' object='LexAda.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexAda.o `test -f '../src/LexAda.cxx' || echo '$(srcdir)/'`../src/LexAda.cxx

LexAda.obj: ../src/LexAda.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexAda.obj -MD -MP -MF $(DEPDIR)/LexAda.Tpo -c -o LexAda.obj `if test -f '../src/LexAda.cxx'; then $(CYGPATH_W) '../src/LexAda.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexAda.cxx'; fi`
	mv -f $(DEPDIR)/LexAda.Tpo $(DEPDIR)/LexAda.Po
#	source='../src/LexAda.cxx' object='LexAda.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexAda.obj `if test -f '../src/LexAda.cxx'; then $(CYGPATH_W) '../src/LexAda.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexAda.cxx'; fi`

LexInno.o: ../src/LexInno.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexInno.o -MD -MP -MF $(DEPDIR)/LexInno.Tpo -c -o LexInno.o `test -f '../src/LexInno.cxx' || echo '$(srcdir)/'`../src/LexInno.cxx
	mv -f $(DEPDIR)/LexInno.Tpo $(DEPDIR)/LexInno.Po
#	source='../src/LexInno.cxx' object='LexInno.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexInno.o `test -f '../src/LexInno.cxx' || echo '$(srcdir)/'`../src/LexInno.cxx

LexInno.obj: ../src/LexInno.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexInno.obj -MD -MP -MF $(DEPDIR)/LexInno.Tpo -c -o LexInno.obj `if test -f '../src/LexInno.cxx'; then $(CYGPATH_W) '../src/LexInno.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexInno.cxx'; fi`
	mv -f $(DEPDIR)/LexInno.Tpo $(DEPDIR)/LexInno.Po
#	source='../src/LexInno.cxx' object='LexInno.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexInno.obj `if test -f '../src/LexInno.cxx'; then $(CYGPATH_W) '../src/LexInno.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexInno.cxx'; fi`

LexOpal.o: ../src/LexOpal.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexOpal.o -MD -MP -MF $(DEPDIR)/LexOpal.Tpo -c -o LexOpal.o `test -f '../src/LexOpal.cxx' || echo '$(srcdir)/'`../src/LexOpal.cxx
	mv -f $(DEPDIR)/LexOpal.Tpo $(DEPDIR)/LexOpal.Po
#	source='../src/LexOpal.cxx' object='LexOpal.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexOpal.o `test -f '../src/LexOpal.cxx' || echo '$(srcdir)/'`../src/LexOpal.cxx

LexOpal.obj: ../src/LexOpal.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexOpal.obj -MD -MP -MF $(DEPDIR)/LexOpal.Tpo -c -o LexOpal.obj `if test -f '../src/LexOpal.cxx'; then $(CYGPATH_W) '../src/LexOpal.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexOpal.cxx'; fi`
	mv -f $(DEPDIR)/LexOpal.Tpo $(DEPDIR)/LexOpal.Po
#	source='../src/LexOpal.cxx' object='LexOpal.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexOpal.obj `if test -f '../src/LexOpal.cxx'; then $(CYGPATH_W) '../src/LexOpal.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexOpal.cxx'; fi`

LexSpice.o: ../src/LexSpice.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexSpice.o -MD -MP -MF $(DEPDIR)/LexSpice.Tpo -c -o LexSpice.o `test -f '../src/LexSpice.cxx' || echo '$(srcdir)/'`../src/LexSpice.cxx
	mv -f $(DEPDIR)/LexSpice.Tpo $(DEPDIR)/LexSpice.Po
#	source='../src/LexSpice.cxx' object='LexSpice.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexSpice.o `test -f '../src/LexSpice.cxx' || echo '$(srcdir)/'`../src/LexSpice.cxx

LexSpice.obj: ../src/LexSpice.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexSpice.obj -MD -MP -MF $(DEPDIR)/LexSpice.Tpo -c -o LexSpice.obj `if test -f '../src/LexSpice.cxx'; then $(CYGPATH_W) '../src/LexSpice.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexSpice.cxx'; fi`
	mv -f $(DEPDIR)/LexSpice.Tpo $(DEPDIR)/LexSpice.Po
#	source='../src/LexSpice.cxx' object='LexSpice.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexSpice.obj `if test -f '../src/LexSpice.cxx'; then $(CYGPATH_W) '../src/LexSpice.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexSpice.cxx'; fi`

LexTCL.o: ../src/LexTCL.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexTCL.o -MD -MP -MF $(DEPDIR)/LexTCL.Tpo -c -o LexTCL.o `test -f '../src/LexTCL.cxx' || echo '$(srcdir)/'`../src/LexTCL.cxx
	mv -f $(DEPDIR)/LexTCL.Tpo $(DEPDIR)/LexTCL.Po
#	source='../src/LexTCL.cxx' object='LexTCL.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexTCL.o `test -f '../src/LexTCL.cxx' || echo '$(srcdir)/'`../src/LexTCL.cxx

LexTCL.obj: ../src/LexTCL.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexTCL.obj -MD -MP -MF $(DEPDIR)/LexTCL.Tpo -c -o LexTCL.obj `if test -f '../src/LexTCL.cxx'; then $(CYGPATH_W) '../src/LexTCL.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexTCL.cxx'; fi`
	mv -f $(DEPDIR)/LexTCL.Tpo $(DEPDIR)/LexTCL.Po
#	source='../src/LexTCL.cxx' object='LexTCL.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexTCL.obj `if test -f '../src/LexTCL.cxx'; then $(CYGPATH_W) '../src/LexTCL.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexTCL.cxx'; fi`

LexCmake.o: ../src/LexCmake.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexCmake.o -MD -MP -MF $(DEPDIR)/LexCmake.Tpo -c -o LexCmake.o `test -f '../src/LexCmake.cxx' || echo '$(srcdir)/'`../src/LexCmake.cxx
	mv -f $(DEPDIR)/LexCmake.Tpo $(DEPDIR)/LexCmake.Po
#	source='../src/LexCmake.cxx' object='LexCmake.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexCmake.o `test -f '../src/LexCmake.cxx' || echo '$(srcdir)/'`../src/LexCmake.cxx

LexCmake.obj: ../src/LexCmake.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexCmake.obj -MD -MP -MF $(DEPDIR)/LexCmake.Tpo -c -o LexCmake.obj `if test -f '../src/LexCmake.cxx'; then $(CYGPATH_W) '../src/LexCmake.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexCmake.cxx'; fi`
	mv -f $(DEPDIR)/LexCmake.Tpo $(DEPDIR)/LexCmake.Po
#	source='../src/LexCmake.cxx' object='LexCmake.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexCmake.obj `if test -f '../src/LexCmake.cxx'; then $(CYGPATH_W) '../src/LexCmake.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexCmake.cxx'; fi`

LexD.o: ../src/LexD.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexD.o -MD -MP -MF $(DEPDIR)/LexD.Tpo -c -o LexD.o `test -f '../src/LexD.cxx' || echo '$(srcdir)/'`../src/LexD.cxx
	mv -f $(DEPDIR)/LexD.Tpo $(DEPDIR)/LexD.Po
#	source='../src/LexD.cxx' object='LexD.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexD.o `test -f '../src/LexD.cxx' || echo '$(srcdir)/'`../src/LexD.cxx

LexD.obj: ../src/LexD.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexD.obj -MD -MP -MF $(DEPDIR)/LexD.Tpo -c -o LexD.obj `if test -f '../src/LexD.cxx'; then $(CYGPATH_W) '../src/LexD.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexD.cxx'; fi`
	mv -f $(DEPDIR)/LexD.Tpo $(DEPDIR)/LexD.Po
#	source='../src/LexD.cxx' object='LexD.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexD.obj `if test -f '../src/LexD.cxx'; then $(CYGPATH_W) '../src/LexD.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexD.cxx'; fi`

LexGAP.o: ../src/LexGAP.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexGAP.o -MD -MP -MF $(DEPDIR)/LexGAP.Tpo -c -o LexGAP.o `test -f '../src/LexGAP.cxx' || echo '$(srcdir)/'`../src/LexGAP.cxx
	mv -f $(DEPDIR)/LexGAP.Tpo $(DEPDIR)/LexGAP.Po
#	source='../src/LexGAP.cxx' object='LexGAP.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexGAP.o `test -f '../src/LexGAP.cxx' || echo '$(srcdir)/'`../src/LexGAP.cxx

LexGAP.obj: ../src/LexGAP.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexGAP.obj -MD -MP -MF $(DEPDIR)/LexGAP.Tpo -c -o LexGAP.obj `if test -f '../src/LexGAP.cxx'; then $(CYGPATH_W) '../src/LexGAP.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexGAP.cxx'; fi`
	mv -f $(DEPDIR)/LexGAP.Tpo $(DEPDIR)/LexGAP.Po
#	source='../src/LexGAP.cxx' object='LexGAP.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexGAP.obj `if test -f '../src/LexGAP.cxx'; then $(CYGPATH_W) '../src/LexGAP.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexGAP.cxx'; fi`

LexPLM.o: ../src/LexPLM.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexPLM.o -MD -MP -MF $(DEPDIR)/LexPLM.Tpo -c -o LexPLM.o `test -f '../src/LexPLM.cxx' || echo '$(srcdir)/'`../src/LexPLM.cxx
	mv -f $(DEPDIR)/LexPLM.Tpo $(DEPDIR)/LexPLM.Po
#	source='../src/LexPLM.cxx' object='LexPLM.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexPLM.o `test -f '../src/LexPLM.cxx' || echo '$(srcdir)/'`../src/LexPLM.cxx

LexPLM.obj: ../src/LexPLM.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexPLM.obj -MD -MP -MF $(DEPDIR)/LexPLM.Tpo -c -o LexPLM.obj `if test -f '../src/LexPLM.cxx'; then $(CYGPATH_W) '../src/LexPLM.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexPLM.cxx'; fi`
	mv -f $(DEPDIR)/LexPLM.Tpo $(DEPDIR)/LexPLM.Po
#	source='../src/LexPLM.cxx' object='LexPLM.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexPLM.obj `if test -f '../src/LexPLM.cxx'; then $(CYGPATH_W) '../src/LexPLM.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexPLM.cxx'; fi`

LexProgress.o: ../src/LexProgress.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexProgress.o -MD -MP -MF $(DEPDIR)/LexProgress.Tpo -c -o LexProgress.o `test -f '../src/LexProgress.cxx' || echo '$(srcdir)/'`../src/LexProgress.cxx
	mv -f $(DEPDIR)/LexProgress.Tpo $(DEPDIR)/LexProgress.Po
#	source='../src/LexProgress.cxx' object='LexProgress.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexProgress.o `test -f '../src/LexProgress.cxx' || echo '$(srcdir)/'`../src/LexProgress.cxx

LexProgress.obj: ../src/LexProgress.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexProgress.obj -MD -MP -MF $(DEPDIR)/LexProgress.Tpo -c -o LexProgress.obj `if test -f '../src/LexProgress.cxx'; then $(CYGPATH_W) '../src/LexProgress.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexProgress.cxx'; fi`
	mv -f $(DEPDIR)/LexProgress.Tpo $(DEPDIR)/LexProgress.Po
#	source='../src/LexProgress.cxx' object='LexProgress.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexProgress.obj `if test -f '../src/LexProgress.cxx'; then $(CYGPATH_W) '../src/LexProgress.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexProgress.cxx'; fi`

LexAbaqus.o: ../src/LexAbaqus.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexAbaqus.o -MD -MP -MF $(DEPDIR)/LexAbaqus.Tpo -c -o LexAbaqus.o `test -f '../src/LexAbaqus.cxx' || echo '$(srcdir)/'`../src/LexAbaqus.cxx
	mv -f $(DEPDIR)/LexAbaqus.Tpo $(DEPDIR)/LexAbaqus.Po
#	source='../src/LexAbaqus.cxx' object='LexAbaqus.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexAbaqus.o `test -f '../src/LexAbaqus.cxx' || echo '$(srcdir)/'`../src/LexAbaqus.cxx

LexAbaqus.obj: ../src/LexAbaqus.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexAbaqus.obj -MD -MP -MF $(DEPDIR)/LexAbaqus.Tpo -c -o LexAbaqus.obj `if test -f '../src/LexAbaqus.cxx'; then $(CYGPATH_W) '../src/LexAbaqus.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexAbaqus.cxx'; fi`
	mv -f $(DEPDIR)/LexAbaqus.Tpo $(DEPDIR)/LexAbaqus.Po
#	source='../src/LexAbaqus.cxx' object='LexAbaqus.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexAbaqus.obj `if test -f '../src/LexAbaqus.cxx'; then $(CYGPATH_W) '../src/LexAbaqus.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexAbaqus.cxx'; fi`

LexASY.o: ../src/LexASY.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexASY.o -MD -MP -MF $(DEPDIR)/LexASY.Tpo -c -o LexASY.o `test -f '../src/LexASY.cxx' || echo '$(srcdir)/'`../src/LexASY.cxx
	mv -f $(DEPDIR)/LexASY.Tpo $(DEPDIR)/LexASY.Po
#	source='../src/LexASY.cxx' object='LexASY.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexASY.o `test -f '../src/LexASY.cxx' || echo '$(srcdir)/'`../src/LexASY.cxx

LexASY.obj: ../src/LexASY.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexASY.obj -MD -MP -MF $(DEPDIR)/LexASY.Tpo -c -o LexASY.obj `if test -f '../src/LexASY.cxx'; then $(CYGPATH_W) '../src/LexASY.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexASY.cxx'; fi`
	mv -f $(DEPDIR)/LexASY.Tpo $(DEPDIR)/LexASY.Po
#	source='../src/LexASY.cxx' object='LexASY.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexASY.obj `if test -f '../src/LexASY.cxx'; then $(CYGPATH_W) '../src/LexASY.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexASY.cxx'; fi`

LexR.o: ../src/LexR.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexR.o -MD -MP -MF $(DEPDIR)/LexR.Tpo -c -o LexR.o `test -f '../src/LexR.cxx' || echo '$(srcdir)/'`../src/LexR.cxx
	mv -f $(DEPDIR)/LexR.Tpo $(DEPDIR)/LexR.Po
#	source='../src/LexR.cxx' object='LexR.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexR.o `test -f '../src/LexR.cxx' || echo '$(srcdir)/'`../src/LexR.cxx

LexR.obj: ../src/LexR.cxx
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT LexR.obj -MD -MP -MF $(DEPDIR)/LexR.Tpo -c -o LexR.obj `if test -f '../src/LexR.cxx'; then $(CYGPATH_W) '../src/LexR.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexR.cxx'; fi`
	mv -f $(DEPDIR)/LexR.Tpo $(DEPDIR)/LexR.Po
#	source='../src/LexR.cxx' object='LexR.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o LexR.obj `if test -f '../src/LexR.cxx'; then $(CYGPATH_W) '../src/LexR.cxx'; else $(CYGPATH_W) '$(srcdir)/../src/LexR.cxx'; fi`

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LIBRARIES)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-noinstLIBRARIES mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-exec-am:

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-noinstLIBRARIES ctags distclean distclean-compile \
	distclean-generic distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am


scintilla-marshal.o: scintilla-marshal.h
	gcc -I/usr/include/gtk-2.0 -I/usr/lib64/gtk-2.0/include -I/usr/include/pango-1.0 -I/usr/include/glib-2.0 -I/usr/lib64/glib-2.0/include -I/usr/include/fribidi -I/usr/include/cairo -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng16 -I/usr/include/uuid -I/usr/include/harfbuzz -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/atk-1.0 -I/usr/include/libxml2 -I/usr/include/vte-0.0 -I/usr/include/gio-unix-2.0/ -pthread  -DWITH_TERMINAL -DWITH_IPC_QUEUE -DWITH_HELP_MENUS -DWITH_SPLITTER_WINDOW -DGTK_IS_2_2 -DGTK_ATLEAST_2_4 -DGTK_ATLEAST_2_6 -c scintilla-marshal.c

marshallers: scintilla-marshal.list
	glib-genmarshal --prefix scintilla_marshal $(srcdir)/scintilla-marshal.list --header > scintilla-marshal.h
	glib-genmarshal --prefix scintilla_marshal $(srcdir)/scintilla-marshal.list --body > scintilla-marshal.c 
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
